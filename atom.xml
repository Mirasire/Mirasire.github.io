<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>MirasireのBlog</title>
  
  <subtitle>Welcome back and goodbye.</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://mirasire.xyz/"/>
  <updated>2020-10-24T14:50:26.029Z</updated>
  <id>http://mirasire.xyz/</id>
  
  <author>
    <name>Mirasire</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>「CSAPP学习笔记」 Data Lab</title>
    <link href="http://mirasire.xyz/2020/10/24/csappdatalab/"/>
    <id>http://mirasire.xyz/2020/10/24/csappdatalab/</id>
    <published>2020-10-24T14:47:47.000Z</published>
    <updated>2020-10-24T14:50:26.029Z</updated>
    
    <content type="html"><![CDATA[<p>观看《深入了解计算机系统》(CSAPP) 和 CMU15213 后的笔记，与做$\text{Data Lab}$时遇到的困难与解答。</p><a id="more"></a><blockquote><p>书本 |《深入了解计算机系统》<br>网课地址<sup><a href="#fn_0" id="reffn_0">0</a></sup> | <a href="https://www.bilibili.com/video/av12977597" target="_blank" rel="noopener"><strong>Here</strong></a><br>Labs地址<sup><a href="#fn_1" id="reffn_1">1</a></sup> | <a href="http://csapp.cs.cmu.edu/3e/labs.html" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><h1 id="text-Bits-ints-and-float"><a href="#text-Bits-ints-and-float" class="headerlink" title="$\text{Bits, ints and float}$"></a>$\text{Bits, ints and float}$</h1><p>$\text{Data Lab}$ 主要用于加深了我对数字 在计算机中的<strong>编码($\text{encoding}$)表示</strong> 的印象，以及一些位($\text{bit}$)级别的转换和计算操作，帮助我更好的理解了，二进制中数字的表示和处理，所以笔记侧重记录于 <strong>二进制编码</strong> 与 <strong>用二进制的方式看待计算</strong>。</p><h2 id="text-Bits-amp-Ints"><a href="#text-Bits-amp-Ints" class="headerlink" title="$\text{Bits &amp; Ints}$"></a>$\text{Bits &amp; Ints}$</h2><h3 id="无符号编码"><a href="#无符号编码" class="headerlink" title="无符号编码"></a>无符号编码</h3><blockquote><p>$\text{Unsigned Encoding}$</p></blockquote><p>$\text{B2U(X) = } \sum_{i \leq 0}^{n}{X_i * 2^i}$</p><h3 id="二进制补码编码"><a href="#二进制补码编码" class="headerlink" title="二进制补码编码"></a>二进制补码编码</h3><blockquote><p>$\text{Two’s-Complement Encoding}$</p></blockquote><p>$\text{B2T(X) = } -X_w * 2^n + \sum_{i \leq 0}^{n-1}{X_i} \qquad (X_w = \text{sign bit})$</p><h3 id="布尔代数"><a href="#布尔代数" class="headerlink" title="布尔代数"></a>布尔代数</h3><div class="table-container"><table><thead><tr><th style="text-align:center">$\text{And}$</th><th style="text-align:center">$\text{Or}$</th><th style="text-align:center">$\text{Not}$</th><th style="text-align:center">$\text{Xor}$</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/img/csapp_datalab_14.png" alt="and_ba"></td><td style="text-align:center"><img src="/img/csapp_datalab_15.png" alt="or_ba"></td><td style="text-align:center"><img src="/img/csapp_datalab_16.png" alt="Not_ba"></td><td style="text-align:center"><img src="/img/csapp_datalab_17.png" alt="xor_ba"></td></tr></tbody></table></div><blockquote><p>实例如下</p></blockquote><p><img src="/img/csapp_datalab_19.png" alt="tmp_ba"></p><h3 id="一些杂记"><a href="#一些杂记" class="headerlink" title="一些杂记"></a>一些杂记</h3><ul><li>$\text{Unsigned}$<ul><li>$U_{max} = \text{0xFFFFFFFF} = 2^{32}-1$</li><li>$U_{min} = 0$</li></ul></li><li>$\text{Two’s-Complement}$<ul><li>$T_{min} = 10000… = \text{0x80000000}$</li><li>$T_{max} = 01111… = \text{0x7FFFFFFF}$</li><li>$T_{min} = -T_{max}-1$</li><li>$abs(T_{min}) = T_{min}$ <code>overflow</code> </li><li>$\text{0xFFFFFFFF} = -1$</li></ul></li><li>$\text{U2T  &amp;  T2U}$<ul><li>$U_{max} = T_{max} \ll 1 + 1$</li></ul></li><li>位扩展($\text{Sign Extension}$)<ul><li>扩展k位 = 向右<strong>复制k位符号位</strong></li></ul></li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">理论公式</th><th style="text-align:center">正数位扩展</th><th style="text-align:center">负数位扩展</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/img/csapp_datalab_11.png" alt="sign extension"></td><td style="text-align:center"><img src="/img/csapp_datalab_12.png" alt="po_sex"></td><td style="text-align:center"><img src="/img/csapp_datalab_13.png" alt="neg_sex"></td></tr></tbody></table></div><ul><li><code>&gt;&gt;</code> 右移 ($\text{Right shift}$)<ul><li>逻辑右移($\text{Logical shift}$)<ul><li><strong>特点：左侧都填充 <code>0</code></strong></li></ul></li><li>算数右移($\text{Arithmetic shift}$)<ul><li><strong>特点：左侧都填充的为 <code>符号位</code></strong></li><li><strong>C语言默认为算数右移</strong></li></ul></li></ul></li></ul><h2 id="text-Float-2"><a href="#text-Float-2" class="headerlink" title="$\text{Float}$2"></a>$\text{Float}$<sup><a href="#fn_2" id="reffn_2">2</a></sup></h2><h3 id="用二进制表示小数"><a href="#用二进制表示小数" class="headerlink" title="用二进制表示小数"></a>用二进制表示小数</h3><div class="table-container"><table><thead><tr><th style="text-align:center">表示</th><th style="text-align:center">$b_i$</th><th style="text-align:center">$b_{i-1}$</th><th style="text-align:center">…</th><th style="text-align:center">$b_2$</th><th style="text-align:center">$b_1$</th><th style="text-align:center">$b_0$</th><th style="text-align:center"><strong>.</strong></th><th style="text-align:center">$b_{-1}$</th><th style="text-align:center">$b_{-2}$</th><th style="text-align:center">$b_{-3}$</th><th style="text-align:center">…</th><th style="text-align:center">$b_{-j}$</th></tr></thead><tbody><tr><td style="text-align:center">权值</td><td style="text-align:center">$2^{i}$</td><td style="text-align:center">$2^{i-1}$</td><td style="text-align:center">…</td><td style="text-align:center">4</td><td style="text-align:center">2</td><td style="text-align:center">1</td><td style="text-align:center">.</td><td style="text-align:center">$\frac{1}{2}$</td><td style="text-align:center">$\frac{1}{4}$</td><td style="text-align:center">$\frac{1}{8}$</td><td style="text-align:center">…</td><td style="text-align:center">$2^{-j}$</td></tr></tbody></table></div><blockquote><p>例子:</p></blockquote><script type="math/tex; mode=display">\begin{aligned}(10.101)_2 &= 1 \times 2^1 + 1 \times 2^{-1} + 1 \times 2^{-3} \\&= 2+0.5+0.125 \\&= (2.625)_{10}\end{aligned}</script><h3 id="text-IEEE-Standard-754"><a href="#text-IEEE-Standard-754" class="headerlink" title="$\text{IEEE  Standard  754}$"></a>$\text{IEEE  Standard  754}$</h3><blockquote><p><strong><u>有意思</u></strong> 的是使用IEEE754标准，来编码的时候会出现 <code>+0</code> 和 <code>-0</code></p></blockquote><p>由于直接使用二进制表示小数的范围十分有限，所以 <code>C语言</code> 采用了 IEE754 标准来对浮点数($\text{Float}$)进行编码，来表示小数。</p><p>浮点数的数学表示形式为 $\text{Float} = {(-1)^s}{M}{2^E}$，其中$M$表示尾数($Mantissa$)<sup><a href="#fn_4" id="reffn_4">4</a></sup>，$E$表示指数($Exponent$)，$s$表示符号，含义同二进制补码中的符号位($sign \ bit$)。</p><blockquote><p>二进制例子:</p></blockquote><script type="math/tex; mode=display">\begin{aligned}(1011.11111)_2 &= {(-1)^0}*{1.01111111}*{2^3} \\(-11011.11111)_2 &= {(-1)^1}*{1.101111111}*{2^4}\end{aligned}</script><p><strong>编码($\text{Encoding}$)</strong></p><ul><li>$\text{s = S}$</li><li>$\text{E = exp - bias or 1 - bias}$<sup><a href="#fn_5" id="reffn_5">5</a></sup><ul><li>$\text{bias}$<sup><a href="#fn_6" id="reffn_6">6</a></sup> $ \ = 2^{sizeof(exp)-1}-1$ </li><li>32位的 $\text{bias}$ 为 127</li><li>64位的 $\text{bias}$ 为 1023</li></ul></li><li>$\text{frac = M}$</li></ul><div class="table-container"><table><thead><tr><th style="text-align:center">32位</th><th style="text-align:center">64位</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/img/csapp_datalab_04.png" alt="32_fencoding"></td><td style="text-align:center"><img src="/img/csapp_datalab_05.png" alt="64_fencoding"></td></tr></tbody></table></div><hr><blockquote><p>根据 <strong>exp</strong> 的不同，我们被编码的值分为 <strong>三种</strong> 情况。</p><div class="table-container"><table><thead><tr><th style="text-align:center">exp</th><th style="text-align:center">皆为0</th><th style="text-align:center">既有0，又有1</th><th style="text-align:center">皆为1</th></tr></thead><tbody><tr><td style="text-align:center">$\text{Values}$</td><td style="text-align:center">$\text{Denormalized}$</td><td style="text-align:center">$\text{Normalized}$</td><td style="text-align:center">$\text{Special}$</td></tr></tbody></table></div></blockquote><ul><li>$\text{s}$ 的计算方法<ul><li><strong>正数</strong> = 0</li><li><strong>负数</strong> = 1</li></ul></li></ul><h4 id="规格化-text-Normalized"><a href="#规格化-text-Normalized" class="headerlink" title="规格化($\text{Normalized}$)"></a>规格化($\text{Normalized}$)</h4><ul><li>$\text{frac}$ 的 计算方法。<ul><li><strong>即</strong> 需要将 $(11111.11011)_{2} \rightarrow {(1.111111011)_{2}}*{2^4}$，即将 $\text{1xxxx.xxxx} \rightarrow \text{1.xxxxxxx}*{2^n}$。</li><li>$\text{frac = xxxxxx…} \leftarrow$ 指 <code>1.xxxxx</code> 中的 <code>.xxxxx</code>。</li><li><strong>当然，只取 23/54 位数。</strong> 这就是为什么 浮点数不准的原因(并不是所有十进制小数都能 <code>完美/有限</code> 转化为二进制)。</li></ul></li><li>$\text{E = exp - bias}$</li><li>值 $ = (-1)^s*{1. \text{frac}}*{2^{exp-127}}$</li></ul><h4 id="非规格化-text-Denormalized"><a href="#非规格化-text-Denormalized" class="headerlink" title="非规格化($\text{Denormalized}$)"></a>非规格化($\text{Denormalized}$)</h4><blockquote><p>$\text{exp}$ 全都为 0 的情况<br>非规格化即为对 $\text{0.xxxxxx}$ 进行编码</p></blockquote><ul><li>$\text{E = 1 - bias = 127}$</li><li>$\text{frac = xxxxxx…} \leftarrow$ 指 <code>0.xxxxx</code> 中的 <code>.xxxxx</code>。</li><li>$\text{exp = 0}$</li><li>值 $= (-1)^s*{0. \text{frac}}*{2^{-126}}$</li></ul><h4 id="特殊值-text-Special"><a href="#特殊值-text-Special" class="headerlink" title="特殊值($\text{Special}$)"></a>特殊值($\text{Special}$)</h4><blockquote><p>$\text{exp}$ <strong>全为0</strong></p></blockquote><ul><li>$\infty \text{(Infinity)}$<ul><li>$\text{frac}$ 全为0</li><li>$\text{s = 0} \rightarrow +\infty$</li><li>$\text{s = 1} \rightarrow -\infty$</li></ul></li><li>$\text{Not-a-Number(NAN)}$<ul><li>$\text{frac}$ 不全为0</li></ul></li></ul><h3 id="舍入-text-Rounding"><a href="#舍入-text-Rounding" class="headerlink" title="舍入($\text{Rounding}$)"></a>舍入($\text{Rounding}$)</h3><blockquote><p>其他舍入方法详见 《CSAPP》 <del>其余舍入方式都很好理解</del></p></blockquote><p>IEEE754标准的默认取舍方式是 <em>向偶数舍入</em>($\text{round to even}$)，也称 <em>向最近舍入</em>($\text{round to the neartest}$)。<br>这种舍入方式的方式是 只有在被取舍部分为，当前的 <strong>中间值</strong> 时，向保留位的最近偶数位舍入，其余状况按照正常的’四舍五入’。</p><blockquote><p><strong>举个例子</strong><sup><a href="#fn_3" id="reffn_3">3</a></sup></p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">十进制</th><th style="text-align:center">二进制</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/img/csapp_datalab_03.png" alt="d_nround"></td><td style="text-align:center"><img src="/img/csapp_datalab_02.png" alt="b_nround"></td></tr></tbody></table></div><h3 id="一些杂记-1"><a href="#一些杂记-1" class="headerlink" title="一些杂记"></a>一些杂记</h3><div class="table-container"><table><thead><tr><th style="text-align:center">乘法($\text{Multipcation}$)</th><th style="text-align:center">加法($\text{Addition}$)</th><th style="text-align:center">加法的解释</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/img/csapp_datalab_20.png" alt="mul_fl"></td><td style="text-align:center"><img src="/img/csapp_datalab_21.png" alt="add_fl"></td><td style="text-align:center"><img src="/img/csapp_datalab_22.png" alt="add2_fl"></td></tr></tbody></table></div><h1 id="text-Data-Lab"><a href="#text-Data-Lab" class="headerlink" title="$\text{Data Lab}$"></a>$\text{Data Lab}$</h1><h2 id="综述"><a href="#综述" class="headerlink" title="综述"></a>综述</h2><p><img src="/img/csapp_datalab_01.png" alt="The Puzzles"></p><h3 id="text-datalab-handout"><a href="#text-datalab-handout" class="headerlink" title="$\text{datalab-handout}$"></a>$\text{datalab-handout}$</h3><blockquote><p>右上角带星号(*) 的 为可执行文件</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">Makefile- Makes btest, fshow, and ishow</span><br><span class="line">README- Data Lab的介绍和使用</span><br><span class="line">bits.c- 所有Puzzels所在的文件，即要补全的文件</span><br><span class="line">bits.h- 头文件</span><br><span class="line">btest.c- btest* 的源文件，详情可见Makefile</span><br><span class="line">  btest.h- 用于编译btest</span><br><span class="line">  decl.c- 用于编译btest</span><br><span class="line">  tests.c       - 用于编译btest</span><br><span class="line">  tests-header.c- 用于编译btest</span><br><span class="line">dlc*- 用于检查 bits.c 是否规则 (注意: btest 不会检查规则)</span><br><span class="line">driver.pl*- 用于自动打分，调用了 dlc+btest</span><br><span class="line">Driverhdrs.pm   - &quot;Beat the Prof&quot; 模式的头文件(可选，详见REAME)</span><br><span class="line">fshow.c- 查看 Float 表示的工具的源代码</span><br><span class="line">ishow.c- 查看 Int 表示的工具的源代码</span><br></pre></td></tr></table></figure><h3 id="自测-使用工具"><a href="#自测-使用工具" class="headerlink" title="自测/使用工具"></a>自测/使用工具</h3><h4 id="text-dlc-btest-driver-pl"><a href="#text-dlc-btest-driver-pl" class="headerlink" title="$\text{dlc/btest/driver.pl}$"></a>$\text{dlc/btest/driver.pl}$</h4><blockquote><p>温馨提示: 若 <code>drivel.pl</code> 和 <code>btest</code> 结果不符，可以调用 <code>dlc</code> 来检测是否 <code>bits.c</code> 合规。</p></blockquote><p><strong>$\text{dlc}$使用指南</strong></p><p><code>dlc</code> 用于检测 <code>bits.c</code> 是否符合 规则限制，若不符合规则，则会报错。<del>一切合规的话，就什么不会返回。</del> </p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 检测是否符合规则</span></span><br><span class="line">./dlc bit.c</span><br></pre></td></tr></table></figure><p>也可以添加 <code>-e</code> 选项，来显示每个函数所用的 <strong>操作符的个数</strong>。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 显示操作符个数</span></span><br><span class="line">./dlc -e bits.c</span><br></pre></td></tr></table></figure><blockquote><p>使用例子</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">合规</th><th style="text-align:center">不合规</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/img/csapp_datalab_06.png" alt="dlc_ok"></td><td style="text-align:center"><img src="/img/csapp_datalab_07.png" alt="dlc_nok"></td></tr></tbody></table></div><p><strong>$\text{btest}$使用指南</strong></p><blockquote><p>注: <code>btest</code> 并不会检测 <code>bits.c</code> 是否符合规则。</p></blockquote><p>使用<code>make</code> 来编译 <code>btest*</code>，详情的编译命令，在同目录下的 <code>Makefile</code> 中。编译成功后生成<code>btest*</code>，运行<code>btest*</code>即可测试函数正确性。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 编译 btest*</span></span><br><span class="line">make btest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 测试 bits.c</span></span><br><span class="line">./btest</span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看 btest 帮助</span></span><br><span class="line">./btest -h</span><br></pre></td></tr></table></figure><p>由于 <code>btest*</code> 不会随着 <code>bits.c</code> 文件的更改而自动更改，所以当你修改了<code>bits.c</code>时，需要对<code>btest*</code>进行重新编译，来使得更改生效。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 清理之前编译产生的中间文件</span></span><br><span class="line">make clean</span><br><span class="line"></span><br><span class="line"><span class="comment"># 重新编译</span></span><br><span class="line">make btest</span><br></pre></td></tr></table></figure><p><strong>$\text{drivel.pl}$使用指南</strong></p><p><code>drivel.pl</code> 的作用，约等于是 <code>dlc</code> + <code>btest</code>，但是不会提示错误信息。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 运行自动打分程序</span></span><br><span class="line">./drivel.pl</span><br></pre></td></tr></table></figure><h4 id="text-ishow-fshow"><a href="#text-ishow-fshow" class="headerlink" title="$\text{ishow/fshow}$"></a>$\text{ishow/fshow}$</h4><blockquote><p><code>ishow</code> 和 <code>fshow</code> 是一个很好的辅助工具，用来帮助理解 <code>数字</code> 在 计算机中的 <strong>编码</strong>。</p></blockquote><p>可以使用<code>make</code>进行单独编译，也可以直接一次性全编译。(<code>btest</code>+<code>ishow</code>+<code>fshow</code>)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 一次性全编译 btest + ishow + fshow</span></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单独编译 ishow (fshow同理)</span></span><br><span class="line">make ishow</span><br></pre></td></tr></table></figure><blockquote><p>使用案例:</p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center">$\text{ishow}$</th><th style="text-align:center">$\text{fshow}$</th></tr></thead><tbody><tr><td style="text-align:center"><img src="/img/csapp_datalab_09.png" alt="ishow"></td><td style="text-align:center"><img src="/img/csapp_datalab_10.png" alt="fshow"></td></tr></tbody></table></div><h3 id="规则描述8"><a href="#规则描述8" class="headerlink" title="规则描述8"></a>规则描述<sup><a href="#fn_8" id="reffn_8">8</a></sup></h3><blockquote><p>具体的函数会有具体的限定，此处只是综述。</p></blockquote><h4 id="text-Int-规则"><a href="#text-Int-规则" class="headerlink" title="$\text{Int}$ 规则"></a>$\text{Int}$ 规则</h4><p>你的代码风格，可以参考如下</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Funct</span><span class="params">(arg1, arg2, ...)</span> </span>&#123;</span><br><span class="line">    <span class="comment">/* brief description of how your implementation works */</span></span><br><span class="line">    <span class="keyword">int</span> var1 = Expr1;</span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">int</span> varM = ExprM;</span><br><span class="line"></span><br><span class="line">    varJ = ExprJ;</span><br><span class="line">    ...</span><br><span class="line">    varN = ExprN;</span><br><span class="line">    <span class="keyword">return</span> ExprR;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>每个<code>Expr</code>表达式 <strong>仅允许使用：</strong></p><ol><li>0~255 (0xFF) 范围内的Int常量，包括0和255。(像 0xffffffff 此类的大常量不能使用)</li><li>函数所传入的变量，和函数内参数。(不能使用全局变量)</li><li>三元运算符 <code>~</code> 和 <code>!</code></li><li>位运算符 <code>&amp;</code>、<code>^</code>、<code>|</code>、<code>+</code>、<code>&lt;&lt;</code>、<code>&gt;&gt;</code></li></ol><p><strong>禁止使用：</strong></p><ol><li>所有的控制结构，例 <code>if</code>, <code>do</code>, <code>while</code>….</li><li>定义任何 <strong>宏</strong>。 (即预处理)</li><li>在<code>bits.c</code> 中新增函数。（你只能填空，不能自定义新函数）</li><li>调用函数</li><li>使用其他运算符，例 <code>&amp;&amp;</code>，<code>||</code>，<code>-</code> 或者 <code>? :</code></li><li><strong>使用类型转化</strong> (隐式也不行)</li><li>使用除了 <code>int</code> 以外的其他数据结构，例 <code>arrays</code>，<code>structs</code>，<code>unions</code>….</li></ol><p><strong>检查你的机器：</strong></p><ol><li>确认你的机器使用 <code>补码</code> 来表示 32位的 <code>int</code>。</li><li><code>&gt;&gt;</code> 操作是使用 <strong>算术右移</strong>。</li><li>确认 <code>&lt;&lt;</code> 小于0 和 <code>&gt;&gt;</code>大于31 的行为是不可预测的。</li></ol><h4 id="text-Float-规则"><a href="#text-Float-规则" class="headerlink" title="$\text{Float}$ 规则"></a>$\text{Float}$ 规则</h4><p><strong>禁止使用：</strong></p><ol><li>定义任何 <strong>宏</strong>。 (即预处理)</li><li>在<code>bits.c</code> 中新增函数。（你只能填空，不能自定义新函数）</li><li>调用函数<br>4.<strong>使用类型转化</strong> (隐式也不行)</li><li>使用除了 <code>int</code>和<code>unsigned</code> 以外的其他数据结构，例 <code>arrays</code>，<code>structs</code>，<code>unions</code>….</li><li>使用任何浮点指针数据类型，运算符 或 常量。</li></ol><hr><h2 id="text-Puzzles-笔记"><a href="#text-Puzzles-笔记" class="headerlink" title="$\text{Puzzles}$ 笔记"></a>$\text{Puzzles}$ 笔记</h2><h3 id="text-bitXor"><a href="#text-bitXor" class="headerlink" title="$\text{bitXor}$"></a>$\text{bitXor}$</h3><p><strong>思路：</strong></p><p>$\textbf{xor}$ 为 <code>同0，异1</code>，<code>a&amp;b</code>只会保留 <strong>全为1</strong> 的，而 <code>(~a)&amp;b</code> 只会保留 <code>a0/b1</code> 的，所以答案是 <code>a0/b1 | a1/b0</code>，那么只要用 <code>&amp;</code> 和 <code>~</code> 来复现 <code>|</code> 即可。</p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * bitXor - x^y using only ~ and &amp; </span></span><br><span class="line"><span class="comment"> *   Example: bitXor(4, 5) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp;</span></span><br><span class="line"><span class="comment"> *   Max ops: 14</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">bitXor</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = (~x) &amp; y;</span><br><span class="line">    <span class="keyword">int</span> var2 = x &amp; (~y);</span><br><span class="line">    <span class="keyword">return</span> ~((~var1)&amp;(~var2));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-tmin"><a href="#text-tmin" class="headerlink" title="$\text{tmin}$"></a>$\text{tmin}$</h3><p><strong>思路：</strong></p><p>显然补码的 $T_{min} \text{ = 0x80000000}$</p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * tmin - return minimum two's complement integer </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 4</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">tmin</span><span class="params">(<span class="keyword">void</span>)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>&lt;&lt;<span class="number">31</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-isTmax"><a href="#text-isTmax" class="headerlink" title="$\text{isTmax}$"></a>$\text{isTmax}$</h3><p><strong>思路：</strong></p><p>补码中有两个数很特殊, 0 和 $T_{min}$，这两个数的<code>~</code>后<code>+1</code>皆为本身(后者是溢出，前者是排除 $\pm$ 0)。<br>思路就是使用这个特性(利用<code>^</code>)，后排除<code>x=0</code>的可能情况即可。</p><p>$T_{min} \text{ = } \sim T_{max}$</p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * isTmax - returns 1 if x is the maximum, two's complement number,</span></span><br><span class="line"><span class="comment"> *     and 0 otherwise </span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | +</span></span><br><span class="line"><span class="comment"> *   Max ops: 10</span></span><br><span class="line"><span class="comment"> *   Rating: 1</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isTmax</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = ~x;</span><br><span class="line">    <span class="keyword">int</span> var2 = x+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> !((var1^var2)|(!var1));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-allOddbits"><a href="#text-allOddbits" class="headerlink" title="$\text{allOddbits}$"></a>$\text{allOddbits}$</h3><p><strong>思路：</strong></p><p>一直对半<code>|</code>即可，由于是偶数位，所以最后判断的是倒数第二位(即需要 <code>&gt;&gt;1</code>)。</p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * allOddBits - return 1 if all odd-numbered bits in word set to 1</span></span><br><span class="line"><span class="comment"> *   where bits are numbered from 0 (least significant) to 31 (most significant)</span></span><br><span class="line"><span class="comment"> *   Examples allOddBits(0xFFFFFFFD) = 0, allOddBits(0xAAAAAAAA) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">allOddBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = (x &gt;&gt; <span class="number">16</span>) &amp; x;</span><br><span class="line">    <span class="keyword">int</span> var2 = (var1 &gt;&gt; <span class="number">8</span>) &amp; var1;</span><br><span class="line">    <span class="keyword">int</span> var3 = (var2 &gt;&gt; <span class="number">4</span>) &amp; var2;</span><br><span class="line">    <span class="keyword">int</span> var4 = (var3 &gt;&gt; <span class="number">2</span>) &amp; var3;</span><br><span class="line">    <span class="keyword">return</span> (var4&gt;&gt;<span class="number">1</span>)&amp;<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-negate"><a href="#text-negate" class="headerlink" title="$\text{negate}$"></a>$\text{negate}$</h3><p><strong>思路：</strong></p><p>在 CMU15213 的网课中有提及。</p><blockquote><p><del>负数的补码就是源码取反+1</del></p></blockquote><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * negate - return -x </span></span><br><span class="line"><span class="comment"> *   Example: negate(1) = -1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 5</span></span><br><span class="line"><span class="comment"> *   Rating: 2</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">negate</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> (~x)+<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-isAsciiDigit"><a href="#text-isAsciiDigit" class="headerlink" title="$\text{isAsciiDigit}$"></a>$\text{isAsciiDigit}$</h3><p><strong>思路：</strong></p><p>先判断是否是<code>0x30</code>，然后判断是否在 <code>0x0</code> ~ <code>0x9</code> 之间。</p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isAsciiDigit - return 1 if 0x30 &lt;= x &lt;= 0x39 (ASCII codes for characters '0' to '9')</span></span><br><span class="line"><span class="comment"> *   Example: isAsciiDigit(0x35) = 1.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x3a) = 0.</span></span><br><span class="line"><span class="comment"> *            isAsciiDigit(0x05) = 0.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 15</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isAsciiDigit</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = !(x &gt;&gt; <span class="number">6</span>);</span><br><span class="line">    <span class="keyword">int</span> var2 = (x + <span class="number">0x10</span>) &gt;&gt; <span class="number">6</span>;</span><br><span class="line">    <span class="keyword">int</span> var3 = x &gt;&gt; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> var4 = (x &gt;&gt; <span class="number">2</span>) | (x &gt;&gt; <span class="number">1</span>);</span><br><span class="line">    var2 = var1 &amp; var2;</span><br><span class="line">    var4 = var3 &amp; var4;</span><br><span class="line"><span class="keyword">return</span> var2 &amp; (~var4);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-conditional"><a href="#text-conditional" class="headerlink" title="$\text{conditional}$"></a>$\text{conditional}$</h3><p><strong>思路：</strong></p><p>利用 <code>xor</code> 中 $ x \oplus 0 = x$ 和 $x \oplus x = 0$ 的特性进行实现。</p><p>所以可以得到一个表达式 $\text{ans = exp1^y^x^exp2}$，和下述表格。</p><div class="table-container"><table><thead><tr><th style="text-align:center">$x$</th><th style="text-align:center">0</th><th style="text-align:center">1</th></tr></thead><tbody><tr><td style="text-align:center">exp1</td><td style="text-align:center">0</td><td style="text-align:center">x</td></tr><tr><td style="text-align:center">exp2</td><td style="text-align:center">y</td><td style="text-align:center">0</td></tr></tbody></table></div><p>用位运算实现上述表格中的 <code>exp</code> 即可。</p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * conditional - same as x ? y : z </span></span><br><span class="line"><span class="comment"> *   Example: conditional(2,4,5) = 4</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 16</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">conditional</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y, <span class="keyword">int</span> z)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = !x;</span><br><span class="line">    <span class="keyword">int</span> var2 = (~var1) + <span class="number">1</span>;</span><br><span class="line">    var1 = ~var2;</span><br><span class="line">    <span class="keyword">return</span> (var2&amp;y)^y^z^(var1&amp;z);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-isLessOrEqual"><a href="#text-isLessOrEqual" class="headerlink" title="$\text{isLessOrEqual}$"></a>$\text{isLessOrEqual}$</h3><p><strong>思路：</strong></p><p>分类讨论三种情况，分别为<code>同号</code>，<code>异号</code>，<code>相等</code>。<br>如果不考虑溢出(即<code>同号</code>情况)，显然$x-y \leq 0$。</p><blockquote><p>小提示：由于当 y = $T_{min}$ 时，转化为 -y 会溢出，但是如果限定为同号，则不会对判断造成影响。</p></blockquote><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * isLessOrEqual - if x &lt;= y  then return 1, else return 0 </span></span><br><span class="line"><span class="comment"> *   Example: isLessOrEqual(4,5) = 1.</span></span><br><span class="line"><span class="comment"> *   Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 24</span></span><br><span class="line"><span class="comment"> *   Rating: 3</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">isLessOrEqual</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = x&gt;&gt;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">int</span> var2 = y&gt;&gt;<span class="number">31</span>;</span><br><span class="line">    <span class="keyword">int</span> var3 = !(x^y); <span class="comment">//x == y</span></span><br><span class="line">    <span class="keyword">int</span> var4 = (~y)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> var5 = ((x+var4)&gt;&gt;<span class="number">31</span>)&amp;<span class="number">1</span>; <span class="comment">//x-y &lt; 0</span></span><br><span class="line">    <span class="keyword">int</span> var7 = (var1^var2)&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> var8 = var7&amp;var1; <span class="comment">//1 when x&lt;0 + y&gt;0</span></span><br><span class="line">    <span class="keyword">int</span> var9 = !(var7&amp;var2); <span class="comment">//0 when x&gt;0 + y&lt;0</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (var8|var3|var5)&amp;var9;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-logicalNeg"><a href="#text-logicalNeg" class="headerlink" title="$\text{logicalNeg}$"></a>$\text{logicalNeg}$</h3><p><strong>思路：</strong></p><p>思路和 <code>isTmax</code> 相同，只有0的补码<code>^</code>源码 <code>= 0</code>，其余 <strong>最高位</strong> 都为<code>1</code>。</p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * logicalNeg - implement the ! operator, using all of </span></span><br><span class="line"><span class="comment"> *              the legal operators except !</span></span><br><span class="line"><span class="comment"> *   Examples: logicalNeg(3) = 0, logicalNeg(0) = 1</span></span><br><span class="line"><span class="comment"> *   Legal ops: ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *   Max ops: 12</span></span><br><span class="line"><span class="comment"> *   Rating: 4 </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">logicalNeg</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var1 = (~x)+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> var2 = ((x&gt;&gt;<span class="number">31</span>)|(var1&gt;&gt;<span class="number">31</span>))&amp;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> (~var2)+<span class="number">2</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-howManyBits"><a href="#text-howManyBits" class="headerlink" title="$\text{howManyBits}$"></a>$\text{howManyBits}$</h3><p><strong>思路：</strong></p><blockquote><p>这边使用<code>^</code>是一个很有意思的小技巧。</p></blockquote><p>只有<code>0/1</code>所需要的位数是1位，其余答案是<code>n+1</code>，<code>n</code>指从右向左第<code>n</code>位，从左向右第一个 <code>1或0</code><sup><a href="#fn_7" id="reffn_7">7</a></sup> 的数字。</p><p><strong>二分</strong>寻找第一次出现的位置，<strong>每次二分移动的长度，刚好为需要加入答案的长度。</strong></p><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* howManyBits - return the minimum number of bits required to represent x in</span></span><br><span class="line"><span class="comment"> *             two's complement</span></span><br><span class="line"><span class="comment"> *  Examples: howManyBits(12) = 5</span></span><br><span class="line"><span class="comment"> *            howManyBits(298) = 10</span></span><br><span class="line"><span class="comment"> *            howManyBits(-5) = 4</span></span><br><span class="line"><span class="comment"> *            howManyBits(0)  = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(-1) = 1</span></span><br><span class="line"><span class="comment"> *            howManyBits(0x80000000) = 32</span></span><br><span class="line"><span class="comment"> *  Legal ops: ! ~ &amp; ^ | + &lt;&lt; &gt;&gt;</span></span><br><span class="line"><span class="comment"> *  Max ops: 90</span></span><br><span class="line"><span class="comment"> *  Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">howManyBits</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> var = x^(x&lt;&lt;<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">int</span> s16 = (!!(var&gt;&gt;<span class="number">16</span>))&lt;&lt;<span class="number">4</span>;</span><br><span class="line">    <span class="keyword">int</span> b16 = var &gt;&gt; s16;</span><br><span class="line">    <span class="keyword">int</span> s8 = (!!(b16&gt;&gt;<span class="number">8</span>))&lt;&lt;<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> b8 = b16 &gt;&gt; s8 &amp; <span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">int</span> s4 = (!!(b8&gt;&gt;<span class="number">4</span>))&lt;&lt;<span class="number">2</span>;</span><br><span class="line">    <span class="keyword">int</span> b4 = b8 &gt;&gt; s4 &amp; <span class="number">0xf</span>;</span><br><span class="line">    <span class="keyword">int</span> s2 = (!!(b4&gt;&gt;<span class="number">2</span>))&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> b2 = b4 &gt;&gt; s2 &amp; <span class="number">3</span>;</span><br><span class="line">    <span class="keyword">int</span> s1 = !!(b2&gt;&gt;<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> s16 + s8 + s4 + s2 + s1 + <span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-floatScale2"><a href="#text-floatScale2" class="headerlink" title="$\text{floatScale2}$"></a>$\text{floatScale2}$</h3><p><strong>思路：</strong></p><blockquote><p>对 $\text{uf}$ 进行分类讨论操作。</p></blockquote><ul><li>如果是 $\text{uf = NAN}$ 就直接返回 $\text{uf}$。</li><li>如果是 $\text{Denormalized}$，直接将$\text{frac}$ 向右移1即可，因为$\text{Denormalized}$和$\text{Normalized}$之间有完美的过度。</li><li>如果是 $\text{Normalized}$。<ul><li>若溢出，则返回 $\text{inf}$ (注意符号)</li><li>否，则正常编码返回即可。</li></ul></li></ul><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatScale2 - Return bit-level equivalent of expression 2*f for</span></span><br><span class="line"><span class="comment"> *   floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Both the argument and result are passed as unsigned int's, but</span></span><br><span class="line"><span class="comment"> *   they are to be interpreted as the bit-level representation of</span></span><br><span class="line"><span class="comment"> *   single-precision floating point values.</span></span><br><span class="line"><span class="comment"> *   When argument is NaN, return argument</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatScale2</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> uf_s = uf&amp;<span class="number">0x80000000</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> uf_exp = (uf&gt;&gt;<span class="number">23</span>)&amp;<span class="number">0xff</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> uf_frac = uf&amp;<span class="number">0x007fffff</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> res;</span><br><span class="line">    <span class="keyword">if</span>(uf_exp == <span class="number">0xff</span> &amp;&amp; uf_frac != <span class="number">0</span>) res = uf^uf_s;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(uf_exp == <span class="number">0</span>) res = uf&lt;&lt;<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">unsigned</span> res_exp = uf_exp+<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(res_exp &gt; <span class="number">0xff</span>) res = <span class="number">0x7f800000</span>; </span><br><span class="line">        <span class="keyword">else</span> res = (res_exp &lt;&lt; <span class="number">23</span>)|uf_frac;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res^uf_s;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-floatFloat2int"><a href="#text-floatFloat2int" class="headerlink" title="$\text{floatFloat2int}$"></a>$\text{floatFloat2int}$</h3><p><strong>思路：</strong></p><p>按照 $\text{IEEE754}$ 标准来解码即可。</p><ul><li>$\text{Denormalized}$ 情况下即返回 <strong>0</strong>。</li><li>$\text{Nan &amp;&amp; Inf}$ 返回 <code>0x80000000</code> (即$T_{min}$)。</li><li>$\text{Normalized}$  情况下。<ul><li>超出 $\text{Int}$ 表示范围，返回<code>0x80000000</code>。</li><li>其余正常返回即可。</li></ul></li></ul><p><strong>代码：</strong></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatFloat2Int - Return bit-level equivalent of expression (int) f</span></span><br><span class="line"><span class="comment"> *   for floating point argument f.</span></span><br><span class="line"><span class="comment"> *   Argument is passed as unsigned int, but</span></span><br><span class="line"><span class="comment"> *   it is to be interpreted as the bit-level representation of a</span></span><br><span class="line"><span class="comment"> *   single-precision floating point value.</span></span><br><span class="line"><span class="comment"> *   Anything out of range (including NaN and infinity) should return</span></span><br><span class="line"><span class="comment"> *   0x80000000u.</span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. also if, while</span></span><br><span class="line"><span class="comment"> *   Max ops: 30</span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">floatFloat2Int</span><span class="params">(<span class="keyword">unsigned</span> uf)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> uf_s = !!(uf&gt;&gt;<span class="number">31</span>);</span><br><span class="line">    <span class="keyword">int</span> uf_E = ((uf &gt;&gt; <span class="number">23</span>) &amp; <span class="number">0xff</span>) - <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">int</span> uf_frac = (uf &amp; <span class="number">0x007fffff</span>) | <span class="number">0x008fffff</span>;</span><br><span class="line">    <span class="keyword">int</span> res;</span><br><span class="line">    <span class="keyword">if</span>(uf_E &lt; <span class="number">0</span>) res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">int</span> right_shift = -(<span class="number">23</span>-uf_E);</span><br><span class="line">        <span class="keyword">if</span>(right_shift &gt; <span class="number">7</span>) res = <span class="number">0x80000000</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(right_shift &lt; <span class="number">0</span>) res = uf_frac &gt;&gt; (-right_shift);</span><br><span class="line">        <span class="keyword">else</span> res = uf_frac &lt;&lt; right_shift;</span><br><span class="line">        <span class="keyword">if</span>(uf_s) res = (~res)+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="text-floatPower2"><a href="#text-floatPower2" class="headerlink" title="$\text{floatPower2}$"></a>$\text{floatPower2}$</h3><script type="math/tex; mode=display">{(2)_{10}}^x = {(-1)^0}*{(1)_2}*{2^{1+x}}</script><p>按照$\text{IEEE754}$标准编码即可。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* </span></span><br><span class="line"><span class="comment"> * floatPower2 - Return bit-level equivalent of the expression 2.0^x</span></span><br><span class="line"><span class="comment"> *   (2.0 raised to the power x) for any 32-bit integer x.</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> *   The unsigned value that is returned should have the identical bit</span></span><br><span class="line"><span class="comment"> *   representation as the single-precision floating-point number 2.0^x.</span></span><br><span class="line"><span class="comment"> *   If the result is too small to be represented as a denorm, return</span></span><br><span class="line"><span class="comment"> *   0. If too large, return +INF.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> *   Legal ops: Any integer/unsigned operations incl. ||, &amp;&amp;. Also if, while </span></span><br><span class="line"><span class="comment"> *   Max ops: 30 </span></span><br><span class="line"><span class="comment"> *   Rating: 4</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">unsigned</span> <span class="title">floatPower2</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">unsigned</span> inf = <span class="number">0x7f800000</span>;</span><br><span class="line">    <span class="keyword">unsigned</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> <span class="built_in">exp</span> = x + <span class="number">127</span>;</span><br><span class="line">    <span class="keyword">if</span>(<span class="built_in">exp</span> &gt;= <span class="number">255</span>) res = inf;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">exp</span> &lt; <span class="number">0</span>) res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">else</span> res = <span class="built_in">exp</span> &lt;&lt; <span class="number">23</span>;</span><br><span class="line"><span class="keyword">return</span> res;</span><br></pre></td></tr></table></figure><h2 id="text-Self-Evaluate"><a href="#text-Self-Evaluate" class="headerlink" title="$\text{Self Evaluate}$"></a>$\text{Self Evaluate}$</h2><blockquote><p>以下为使用 drivel.pl 对上述解答的打分截图</p></blockquote><p><img src="/img/csapp_datalab_done.png" alt="done"></p><hr><blockquote id="fn_0"><sup>0</sup>. 课程为CMU15213，来源 Bilibili<a href="#reffn_0" title="Jump back to footnote [0] in the text."> &#8617;</a></blockquote><blockquote id="fn_1"><sup>1</sup>. CSAPP书本官网，此次为 Data Lab<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a></blockquote><blockquote id="fn_2"><sup>2</sup>. IEE754标准，并不是所有CPU都支持，例如 Cell BE<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a></blockquote><blockquote id="fn_3"><sup>3</sup>. CMU15213课件 “04-float.pdf”<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a></blockquote><blockquote id="fn_4"><sup>4</sup>. 尾数的范围 $[1.0 ,2.0)$<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a></blockquote><blockquote id="fn_5"><sup>5</sup>. 当exp全为0时，E = 1 - bias<a href="#reffn_5" title="Jump back to footnote [5] in the text."> &#8617;</a></blockquote><blockquote id="fn_6"><sup>6</sup>. bias 即 偏移量<a href="#reffn_6" title="Jump back to footnote [6] in the text."> &#8617;</a></blockquote><blockquote id="fn_7"><sup>7</sup>. 负数为0，正数为1<a href="#reffn_7" title="Jump back to footnote [7] in the text."> &#8617;</a></blockquote><blockquote id="fn_8"><sup>8</sup>. 详细可见 <code>datalab-handout/bits.c</code><a href="#reffn_8" title="Jump back to footnote [8] in the text."> &#8617;</a></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;观看《深入了解计算机系统》(CSAPP) 和 CMU15213 后的笔记，与做$\text{Data Lab}$时遇到的困难与解答。&lt;/p&gt;
    
    </summary>
    
    
      <category term="MOOC" scheme="http://mirasire.xyz/categories/MOOC/"/>
    
      <category term="CMU CS:APP" scheme="http://mirasire.xyz/categories/MOOC/CMU-CS-APP/"/>
    
    
      <category term="csapp" scheme="http://mirasire.xyz/tags/CSAPP/"/>
    
      <category term="notes" scheme="http://mirasire.xyz/tags/NOTES/"/>
    
      <category term="labs" scheme="http://mirasire.xyz/tags/LABS/"/>
    
  </entry>
  
  <entry>
    <title>进行Hexo博客的迁移</title>
    <link href="http://mirasire.xyz/2020/04/07/HEXO2/"/>
    <id>http://mirasire.xyz/2020/04/07/HEXO2/</id>
    <published>2020-04-07T14:41:15.000Z</published>
    <updated>2020-09-22T14:42:34.780Z</updated>
    
    <content type="html"><![CDATA[<p>对<strong>Hexo</strong>的博客进行<strong>迁移</strong>。</p><a id="more"></a><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>一不小心把Ubuntu系统给⛏崩了…..，<del>这边不是指没了图形界面，是真的开机直接卡死，切换不了tty…</del>，然后重装的U盘在宿舍，因为该死的COVID19，最近也回不去，<strong>重装也就暂时不可行了</strong>。开始十分的自闭，就完全不想在win下写博客，有点不太习惯，<del>之前用vim，所有snippets都丢了，十分不适应</del>，后来发现vscode也蛮赞的，而且之前我瞎搞乱搞的时候，给博客整了个大备份，于是就又在win上试了试，看看能不能部署成功，不过也踩了一些坑，于是便记录下，以便后续的博客迁移操作。</p><h1 id="迁移后的结果展示"><a href="#迁移后的结果展示" class="headerlink" title="迁移后的结果展示"></a>迁移后的结果展示</h1><p><img src="/img/hexo2show.jpg" alt="show"></p><h1 id="教程"><a href="#教程" class="headerlink" title="教程"></a>教程</h1><blockquote><p>以下仅代表个人解决办法，并非最优解。</p></blockquote><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><blockquote><p>迁移前的环境 → 迁移后的环境<br>系统: Ubuntu 18.04.3 LTS → Windows 10<br>Node.js版本: v12.12.0 → v12.16.1<br>npm版本: 6.11.3 → 6.13.4</p></blockquote><h2 id="在前一个环境的准备"><a href="#在前一个环境的准备" class="headerlink" title="在前一个环境的准备"></a>在前一个环境的准备</h2><p>在github中新建一个仓库，clone到本地，之后在原来目录中删除所有与git配置相关的文件并将所有文件复制到clone下来的仓库中。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#删除所有与git相关的文件。</span></span><br><span class="line">find . -name <span class="string">".git*"</span> -<span class="built_in">exec</span> rm -rf &#123;&#125; \;</span><br></pre></td></tr></table></figure><p>之后push到github即可这就完成了备份。</p><h2 id="在Win10下的环境配置"><a href="#在Win10下的环境配置" class="headerlink" title="在Win10下的环境配置"></a>在Win10下的环境配置</h2><h3 id="下载Node-js"><a href="#下载Node-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h3><p>官网下载安装即可 | <a href="https://nodejs.org/en/" target="_blank" rel="noopener"><strong>LINK</strong></a>。</p><h3 id="途中出现的github的问题"><a href="#途中出现的github的问题" class="headerlink" title="途中出现的github的问题"></a>途中出现的github的问题</h3><blockquote><p>使用的是WSL中的git</p></blockquote><p>在WSL建立了一个软链接，指向Win系统中一个空间比较大的盘，win系统的目录在WSL中是在<code>\mnt\&#39;盘符&#39;</code>下。<br>在所有配置完成后，在用git clone远程仓库的时候，却显示<code>ssh: connect to host github.com port 22: Connection refused</code>。<br>排除了与github的验证问题以后，发现可能是端口被占用的问题。<br>于是在<code>~/.ssh/</code>下新建了一个<code>config</code>文件，这里需要注意<code>config</code>文件的权限为<strong>600</strong>。<br>在<code>config</code>文件中黏贴以下文本后，与github的链接就十分稳定。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Host github.com</span><br><span class="line">User &apos;在git配置的邮箱&apos;</span><br><span class="line">Hostname ssh.github.com</span><br><span class="line">PreferredAuthentications publickey</span><br><span class="line">IdentityFile ~/.ssh/id_rsa</span><br><span class="line">Port 443</span><br></pre></td></tr></table></figure><h3 id="部署的时候出现的问题"><a href="#部署的时候出现的问题" class="headerlink" title="部署的时候出现的问题"></a>部署的时候出现的问题</h3><p>这个也蛮玄学的，莫名奇妙的部署不了，然后看了下提示，把<code>Next</code>主题<code>languages</code>文件夹下的<code>default.yml</code>删除即可。</p><h1 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h1><p><a href="https://blog.csdn.net/mbuger/article/details/70226712?%3E" target="_blank" rel="noopener"><strong>解决github端口22拒绝访问</strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;对&lt;strong&gt;Hexo&lt;/strong&gt;的博客进行&lt;strong&gt;迁移&lt;/strong&gt;。&lt;/p&gt;
    
    </summary>
    
    
      <category term="胡搞瞎搞💥" scheme="http://mirasire.xyz/categories/%E8%83%A1%E6%90%9E%E7%9E%8E%E6%90%9E%F0%9F%92%A5/"/>
    
    
      <category term="博客搭建" scheme="http://mirasire.xyz/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
      <category term="Github" scheme="http://mirasire.xyz/tags/GITHUB/"/>
    
      <category term="hexo" scheme="http://mirasire.xyz/tags/HEXO/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1860 Currency Exchange</title>
    <link href="http://mirasire.xyz/2020/04/06/POJ1860/"/>
    <id>http://mirasire.xyz/2020/04/06/POJ1860/</id>
    <published>2020-04-06T06:45:54.000Z</published>
    <updated>2020-09-22T14:42:34.784Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em> 知识点: 判断正环</em></strong></p><blockquote><p>题目地址 | <a href="https://vjudge.net/problem/POJ-1860" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h1 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h1><p>我们的城市有<strong>M</strong>个货币兑换点，<strong>N</strong>种货币。让我们假设每一个点都只能兑换专门的两种货币。可以有几个点，专门从事相同货币兑换。<br>例如，如果你想换100美元到俄罗斯卢布兑换点，那里的汇率是29.75，而佣金是0.39，你会得到（100 - 0.39）×29.75＝2963.3975卢布。 </p><p><strong>问:</strong>  nick有<strong>V</strong>块<strong>S</strong>国的货币，他希望能通过一些操作（在不同的兑换点兑换），增加他的资本。当然，他想在最后手中的钱仍然是<strong>S</strong>国的。帮他解答这个难题，看他能不能完成这个愿望。 </p><blockquote><p>输入</p></blockquote><p><strong>!!! 单组输入 !!!</strong></p><p>先输入N(钟货币)、M(个兑换点)、S(当前持有货币类型)、V(持有金额)<br>然后输入M行，每行输入5个数字分别为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a国货币   b国货币   从a-&gt;b的佣金    从a-&gt;b的手续费  从b-&gt;a的佣金    从b-&gt;a的手续费</span><br></pre></td></tr></table></figure></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">2</span> <span class="number">1</span> <span class="number">20.0</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1.00</span> <span class="number">1.00</span> <span class="number">1.00</span> <span class="number">1.00</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1.10</span> <span class="number">1.00</span> <span class="number">1.10</span> <span class="number">1.00</span></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><p>假设钱<strong>可以变多</strong>，就输出<strong>YES</strong>，否则输出<strong>NO</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">YES</span><br></pre></td></tr></table></figure><h1 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h1><p>其实只要在图中找一个环，这个环可以使得金额变多即可。因为有了’正’环，就可增长到无限多，兑换回原来的货币就不用考虑，亏损了。</p><p>至于如何判断是否存在一个’正’环？用bellmanford来判断即可，虽然之前是求最短路，但是改变松弛条件后，遇到正环也会无限循环，即超过最大松弛次数 $n-1$次，即存在’正’环。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;queue&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">120</span>;</span><br><span class="line"><span class="keyword">float</span> d[maxn];</span><br><span class="line"><span class="keyword">int</span> head[maxn],ct[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt;</span><br><span class="line">    <span class="comment">//r是汇率,c是佣金</span></span><br><span class="line">    <span class="keyword">float</span> r,c;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">def</span><span class="params">(<span class="keyword">float</span> _r,<span class="keyword">float</span> _c)</span> </span>&#123; r=_r,c=_c; &#125;</span><br><span class="line">&#125; e[maxn&lt;&lt;<span class="number">4</span>];</span><br><span class="line"><span class="keyword">int</span> cnt;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) head[i]=<span class="number">-1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">addEdge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">float</span> r,<span class="keyword">float</span> c)</span> </span>&#123;</span><br><span class="line">    cnt++;</span><br><span class="line">    e[cnt].to=b; e[cnt].nxt=head[a]; e[cnt].def(r,c);</span><br><span class="line">    head[a]=cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">spfa</span><span class="params">(<span class="keyword">int</span> s,<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> now;</span><br><span class="line">    <span class="keyword">float</span> tmp,old=d[s];</span><br><span class="line">    <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; <span class="built_in">list</span>;</span><br><span class="line">    <span class="built_in">list</span>.push(s);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">list</span>.empty()) &#123;</span><br><span class="line">        now = <span class="built_in">list</span>.front();</span><br><span class="line">        <span class="built_in">list</span>.pop();</span><br><span class="line">        vis[now]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now]; i!=<span class="number">-1</span>; i=e[i].nxt) &#123;</span><br><span class="line">            <span class="keyword">if</span>((!vis[e[i].to]&amp;&amp;(tmp=(d[now]-e[i].c)*e[i].r)&gt;d[e[i].to])) &#123;</span><br><span class="line">                d[e[i].to]=tmp;</span><br><span class="line">                vis[e[i].to]=<span class="number">1</span>;</span><br><span class="line">                ct[e[i].to]++;  <span class="comment">//判断正环的部分</span></span><br><span class="line">                <span class="built_in">list</span>.push(e[i].to);</span><br><span class="line">                <span class="keyword">if</span>(ct[e[i].to]&gt;=n) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="keyword">int</span> n,m,s;</span><br><span class="line">    <span class="keyword">float</span> v;</span><br><span class="line">    <span class="keyword">float</span> rab,rba;</span><br><span class="line">    <span class="keyword">float</span> cab,cba;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d%d%f"</span>,&amp;n,&amp;m,&amp;s,&amp;v);</span><br><span class="line">    init(n);</span><br><span class="line">    d[s]=v;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d%f%f%f%f"</span>,&amp;a,&amp;b,&amp;rab,&amp;cab,&amp;rba,&amp;cba);</span><br><span class="line">        addEdge(a,b,rab,cab);</span><br><span class="line">        addEdge(b,a,rba,cba);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%s\n"</span>,spfa(s,n)?<span class="string">"YES"</span>:<span class="string">"NO"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt; 知识点: 判断正环&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目地址 | &lt;a href=&quot;https://vjudge.net/problem/POJ-1860&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="POJ" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/POJ/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="最短路" scheme="http://mirasire.xyz/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
      <category term="图论" scheme="http://mirasire.xyz/tags/%E5%9B%BE%E8%AE%BA/"/>
    
  </entry>
  
  <entry>
    <title>POJ 3080 Blue Jeans</title>
    <link href="http://mirasire.xyz/2020/03/14/POJ3080/"/>
    <id>http://mirasire.xyz/2020/03/14/POJ3080/</id>
    <published>2020-03-14T10:11:11.000Z</published>
    <updated>2020-09-22T14:42:34.784Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>知识点： KMP+枚举</em></strong></p><blockquote><p>题目链接 | <a href="https://vjudge.net/problem/POJ-3080#author=0" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>最长公共子串问题，子串必须连续。</p><p>问: 最长的公共子串是什么?</p><p>每个字符串固定由<strong>60</strong>个字符组成，且<strong>最多有10个</strong>字符串。</p><blockquote><p>输入</p></blockquote><p>先输入$t$表示有$t$组案例。<br>每组案例先输入一个$n$，表示有$n$个字符串<br>之后输入$n$行字符串，每个字符串的字符个数为<strong>60</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">2</span></span><br><span class="line">GATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATA</span><br><span class="line">AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line"><span class="number">3</span></span><br><span class="line">GATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATACCAGATA</span><br><span class="line">GATACTAGATACTAGATACTAGATACTAAAGGAAAGGGAAAAGGGGAAAAAGGGGGAAAA</span><br><span class="line">GATACCAGATACCAGATACCAGATACCAAAGGAAAGGGAAAAGGGGAAAAAGGGGGAAAA</span><br><span class="line"><span class="number">3</span></span><br><span class="line">CATCATCATCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC</span><br><span class="line">ACATCATCATAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA</span><br><span class="line">AACATCATCATTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTTT</span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><ul><li>若不存在输出<strong>no significant commonalities</strong></li><li>否则输出字典序最小的最长子串</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">no significant commonalities</span><br><span class="line">AGATAC</span><br><span class="line">CATCATCAT</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>无脑暴力肯定会<strong>TLE</strong>，所以使用<strong>KMP</strong>加速在后续找匹配的速度。</p><p>因此只要在第一行中暴力找出所有可能的情况$\binom{2}{60}$，并使用KMP算法在接下来的几行中暴力匹配即可。</p><p><del>KMP复杂度太优秀了只要O(n+m)!!!</del></p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> nxt[<span class="number">70</span>];</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="built_in">string</span> p;</span><br><span class="line"><span class="built_in">string</span> t[<span class="number">12</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">getNxt</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">-1</span>;</span><br><span class="line">    nxt[<span class="number">0</span>]=<span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;l) &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span>||p[i]==p[j]) &#123;</span><br><span class="line">            i++,j++;</span><br><span class="line">            nxt[i]=(p[i]==p[j])? nxt[j] : j;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            j=nxt[j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">kmp</span><span class="params">(<span class="keyword">int</span> k,<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> i=<span class="number">0</span>,j=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(i&lt;<span class="number">60</span>&amp;&amp;j&lt;l) &#123;</span><br><span class="line">        <span class="keyword">if</span>(j==<span class="number">-1</span> || t[k][i]==p[j]) i++,j++;</span><br><span class="line">        <span class="keyword">else</span> j=nxt[j];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(j==l) <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">(<span class="keyword">int</span> l)</span> </span>&#123;</span><br><span class="line">    getNxt(l);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!kmp(i,l)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">//find substr</span></span><br><span class="line">    <span class="keyword">int</span> len;</span><br><span class="line">    <span class="built_in">string</span> ans=<span class="string">""</span>;</span><br><span class="line">    <span class="keyword">bool</span> flg=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">60</span>; i++) &#123;</span><br><span class="line">        len=<span class="number">60</span>-i;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">3</span>; j&lt;=len; j++) &#123;</span><br><span class="line">            p = t[<span class="number">0</span>].substr(i,j);</span><br><span class="line">            <span class="keyword">if</span>(check(j)) &#123;</span><br><span class="line">                flg=<span class="number">1</span>;</span><br><span class="line">                ans = (p.size()&gt;ans.size() || (p.size()==ans.size()&amp;&amp;p&lt;ans))? p : ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flg) <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"no significant commonalities\n"</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; m;</span><br><span class="line">    <span class="keyword">while</span>(m--) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">cin</span> &gt;&gt; t[i];</span><br><span class="line">        slove();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;知识点： KMP+枚举&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目链接 | &lt;a href=&quot;https://vjudge.net/problem/POJ-3080#author=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="POJ" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/POJ/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="字符串" scheme="http://mirasire.xyz/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
      <category term="枚举" scheme="http://mirasire.xyz/tags/%E6%9E%9A%E4%B8%BE/"/>
    
      <category term="KMP" scheme="http://mirasire.xyz/tags/KMP/"/>
    
  </entry>
  
  <entry>
    <title>Git 学习笔记 - 1</title>
    <link href="http://mirasire.xyz/2020/02/20/GIT1/"/>
    <id>http://mirasire.xyz/2020/02/20/GIT1/</id>
    <published>2020-02-20T14:41:20.000Z</published>
    <updated>2020-10-24T14:49:40.208Z</updated>
    
    <content type="html"><![CDATA[<p>$Git$分布式管理系统学习指<del>北</del>南。</p><p>本文主要介绍$Git$的<strong>基本使用方法</strong>，未涉及关于$Github$的内容。</p><p><strong>!!本文写于Linux环境下，若是window环境需自己酌情更改。!!</strong></p><a id="more"></a><h1 id="Step-0-Git-是什么"><a href="#Step-0-Git-是什么" class="headerlink" title="Step 0. $Git$是什么?"></a>Step 0. $Git$是什么?</h1><p>对于我来说$Git$就是一个文件管理系统，只不过记录了我所有的更改的文件管理系统，不过按照官方语言来说。<br>$Git$是一个分布式版本控制系统(Distributed Version Control System，简称<strong>DVCS</strong>)，关于什么是分布式版本控制系统? 可以<a href="https://Git-scm.com/book/en/v2/Getting-Started-About-Version-Control" target="_blank" rel="noopener">详见此文章</a>。</p><p>关于$Git$的一些特性</p><ul><li><strong>直接记录快照，而非差异比较</strong></li><li><strong>近乎所有操作都是本地执行</strong></li><li><strong>Git 保证完整性</strong></li><li><strong>Git 一般只添加数据</strong></li></ul><p>这边重点是$Git$有<strong>三个工作区的</strong>概念，这个对理解$Git$的大致运行很有帮助。</p><p>三个工作区分为:<code>工作目录</code>，<code>暂存区域</code>，<code>Git仓库</code>，这三个工作区之间的关系如下。</p><p><img src="/img/git1_rela.webp" alt="rela"></p><p>对于工作目录有<strong>三种状态</strong>:</p><ul><li>已修改 (modified): 已修改，但是未保存到数据库中。</li><li>已暂存(staged): 已经做了标记(add)，但是还没有提交(commit)。</li><li>已提交(committed): 已经保存到了本地数据库中。</li></ul><p>对于工作区中的文件则有四种状态，分别为<code>untracked</code>、<code>unmodified</code>、<code>modified</code>、<code>staged</code>，其中<strong>后三种</strong>通称<code>已追踪</code>状态，因此大方向看也分为两种状态<strong>已追踪</strong>和<strong>未追踪</strong>状态，具体就留到命令的时候再同时进行解释。</p><p>基本的$Git$工作流程如下:</p><ol><li><p>在工作目录中修改文件。</p></li><li><p>暂存文件，将文件的快照放入暂存区域。</p></li><li>提交更新，找到暂存区域的文件，将快照永久性存储到 $Git$ 仓库目录。</li></ol><p>由于学习GUI的$Git$就失去了，原本的$Git$的味道了，所以选择学习的为命令行模式。</p><h1 id="Step-1-如何配置-Git"><a href="#Step-1-如何配置-Git" class="headerlink" title="Step 1. 如何配置$Git$?"></a>Step 1. 如何配置$Git$?</h1><p>关于$Git$配置变量存放的默认位置。</p><p>在当前用户的家目录(<code>~/</code>)下会有一个<strong>.Gitconifg</strong>文件或者是<code>~/.config/Git/</code>里面的<strong>config</strong>文件，这个就是针对当前用户的配置。</p><p>在使用仓库(<code>.Git/</code>)里面的<strong>config</strong>文件是针对仓库的配置。</p><p>使用配置的优先级是 <code>.Git/config</code> <strong>&gt;</strong> <code>~/.Gitconfig</code> <strong>=</strong> <code>~/.config/Git/config</code> <strong>&gt;</strong> <code>系统Git配置变量</code>。</p><p>当然$Git$也提供<code>git config</code>命令来帮助设置配置变量。</p><h2 id="设置与检查的命令"><a href="#设置与检查的命令" class="headerlink" title="设置与检查的命令"></a>设置与检查的命令</h2><p>在每次安装完毕后我们都要对<strong>用户名</strong>和<strong>邮箱</strong>进行设置，因为每次提交都会作为身份来使用。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># --golbal 表示全局配置</span></span><br><span class="line"><span class="comment"># 设置名字</span></span><br><span class="line">git config --global user.name <span class="string">'XXXX'</span></span><br><span class="line"><span class="comment"># 设置邮箱</span></span><br><span class="line">git config --global user.email XXX@XXX.com</span><br><span class="line"><span class="comment"># 设置编辑方式为vim</span></span><br><span class="line">git config --global core.editor vim</span><br></pre></td></tr></table></figure><p>当然也可以直接在配置文件中书写配置，不过显然用命令会方便很多。</p><p>在配置完毕后，我们可以使用<code>git config --list</code>对<strong>检查配置</strong>。</p><p>也可以使用<code>git config &lt;key&gt;</code>来检<strong>单项配置</strong>，如<code>git config core.editor</code></p><h2 id="内置查询手册"><a href="#内置查询手册" class="headerlink" title="内置查询手册"></a>内置查询手册</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 关于Git命令的内置手册</span></span><br><span class="line">git <span class="built_in">help</span></span><br><span class="line"><span class="comment"># 关于Git初始化设置的内置手册</span></span><br><span class="line">git <span class="built_in">help</span> config</span><br></pre></td></tr></table></figure><h1 id="step-2-关于-Git-的基本命令"><a href="#step-2-关于-Git-的基本命令" class="headerlink" title="step 2. 关于$Git$的基本命令"></a>step 2. 关于$Git$的基本命令</h1><p>如果将本地整理比喻做<strong>‘家’</strong>，这一段的别名就成了<strong>整理家的艺术</strong>。</p><h2 id="本地初始化和获取远程仓库"><a href="#本地初始化和获取远程仓库" class="headerlink" title="本地初始化和获取远程仓库"></a>本地初始化和获取远程仓库</h2><p>初始化有两种方法<strong>从零开始</strong>和<strong>接着干</strong>。</p><h3 id="本地目录初始化仓库"><a href="#本地目录初始化仓库" class="headerlink" title="本地目录初始化仓库"></a>本地目录初始化仓库</h3><p><strong>初始化命令如下:</strong></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#本地目录初始化仓库</span></span><br><span class="line">git init</span><br><span class="line"><span class="comment">#将当前目录的所有文件加入追踪</span></span><br><span class="line">git add .</span><br><span class="line"><span class="comment">#将文件保存到本地仓库中</span></span><br><span class="line">git commit -m <span class="string">'initial the repo'</span></span><br></pre></td></tr></table></figure><p>在运行命令之后查看当前目录<strong>所有文件</strong>，会发现一个<code>.git/</code>的子目录，这个是上述命令创建的，里面包含了所有$Git$需要重要信息。<br><code>.git</code>的存在表示了仓库初始化的完成，但是此时目录中的文件都是<code>untracked</code>状态，此时我们需要使用<code>add</code>命令将所有文件加入追踪，<strong>即工作目录变为(modified)。</strong><br>最后则是使用<code>commit</code>命令将<strong>已更改(modified)</strong>变为<strong>已提交(submitted)</strong>。</p><h3 id="克隆获取远程仓库"><a href="#克隆获取远程仓库" class="headerlink" title="克隆获取远程仓库"></a>克隆获取远程仓库</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#克隆获取远程仓库</span></span><br><span class="line">git <span class="built_in">clone</span> [URL]</span><br></pre></td></tr></table></figure><p>这个方法是从远程仓库获取，获取下来后所有的文件已经处于可追踪(<code>unmodified</code>)状态。</p><h2 id="追踪和提交文件"><a href="#追踪和提交文件" class="headerlink" title="追踪和提交文件"></a>追踪和提交文件</h2><p>追踪和提交文件会对文件的状态进行更改，因此先解释关于文件的状态。</p><p>对于<strong>文件</strong>细致来说总共有<strong>四种状态</strong>关系如下:</p><p><img src="/img/git_rele2.jpg" alt="rela2"></p><p>$Git$提供了<code>git status</code>查询命令使得可以对目前仓库下文件的状态进行查询，但是<strong>需要注意</strong><code>unmodified</code>的状态$git$不会给出，同时命令行中，文件会显示<strong>两种颜色</strong>，红色代表<strong>未追踪</strong>或<strong>未暂存</strong>，<strong>绿色代表已暂存</strong>。</p><p>下面是对于每个状态的命令行返回示例。</p><h3 id="untracked"><a href="#untracked" class="headerlink" title="untracked"></a><strong>untracked</strong></h3><p><code>➜  learn-git git:(master) ✗</code> 后面表示命令行输入。</p><pre><font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>learn-git</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> echo &apos;Try a Try&apos; &gt; README<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>learn-git</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>) </b></font><font color="#657B83"><b>✗</b></font> git statusOn branch masterUntracked files:  (use &quot;git add &lt;file&gt;...&quot; to include in what will be committed)    <font color="#DC322F">README</font>nothing added to commit but untracked files present (use &quot;git add&quot; to track)</pre><p>命令行的提示也给出了此文件是一个未追踪文件<code>Untracked file:</code>，在这一行下面的文件均为未追踪文件。</p><p>由于没有加入追踪，此时文件是处于$Git$管理外的，因此我们将文件纳入追踪，即直接将文件变未暂存状态。</p><h3 id="staged-git-add"><a href="#staged-git-add" class="headerlink" title="staged [git add]"></a><strong>staged</strong> <code>[git add]</code></h3><p><strong>untracked to staged/tracked</strong></p><pre><font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>learn-git</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>) </b></font><font color="#657B83"><b>✗</b></font> git add README<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>learn-git</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>) </b></font><font color="#657B83"><b>✗</b></font> git statusOn branch masterChanges to be committed:  (use &quot;git reset HEAD &lt;file&gt;...&quot; to unstage)    <font color="#859900">new file:   README</font></pre><h3 id="unmodified-git-commit"><a href="#unmodified-git-commit" class="headerlink" title="unmodified [git commit]"></a><strong>unmodified</strong> <code>[git commit]</code></h3><p><strong>staged to unmodified</strong></p><pre><font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>learn-git</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>) </b></font><font color="#657B83"><b>✗</b></font> git commit -m &apos;add README File&apos;[master 2f0d641] add README File 1 file changed, 1 insertion(+) create mode 100644 README<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>learn-git</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> git statusOn branch masternothing to commit, working tree clean</pre><h3 id="modified"><a href="#modified" class="headerlink" title="modified"></a><strong>modified</strong></h3><p><strong>unmodified to modified</strong></p><pre><font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>learn-git</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> echo &apos;editor agian&apos; &gt;&gt; README<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>learn-git</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>) </b></font><font color="#657B83"><b>✗</b></font> git statusOn branch masterChanges not staged for commit:  (use &quot;git add &lt;file&gt;...&quot; to update what will be committed)  (use &quot;git checkout -- &lt;file&gt;...&quot; to discard changes in working directory)    <font color="#DC322F">modified:   README</font>no changes added to commit (use &quot;git add&quot; and/or &quot;git commit -a&quot;)</pre><p>对于修改状态，命令行会在前面提示<code>modified</code>，十分清晰。</p><h3 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h3><p>当让我们也可以使用’git status -s’来简单查看文件的状态。</p><p>同时有时候我们使用<code>git add .</code>，但可能不需要将所有的文件加入暂存，比如生成的应用文件，由此我们可以在仓库中创建<code>.gitignore</code>文件来告诉$Git$哪些文件不需要纳入管理。</p><p>关于<code>.gitignore</code>的详细写法可以查看<a href="https://git-scm.com/book/en/v2/Git-Basics-Recording-Changes-to-the-Repository#_ignoring" target="_blank" rel="noopener">Git pro</a>。</p><h2 id="撤销仓库中的操作"><a href="#撤销仓库中的操作" class="headerlink" title="撤销仓库中的操作"></a>撤销仓库中的操作</h2><p>关于这里的部分详情可以查看书籍 | <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%92%A4%E6%B6%88%E6%93%8D%E4%BD%9C" target="_blank" rel="noopener"><strong>Here</strong></a><br>个人建议使用<code>git checkout -b</code>和<code>git merge</code>命令回退修改并合并。</p><h2 id="查看提交日志"><a href="#查看提交日志" class="headerlink" title="查看提交日志"></a>查看提交日志</h2><p>可以使用以下命令来查看提交日志。</p><pre><font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>learn-git</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>) </b></font><font color="#657B83"><b>✗</b></font> git log<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>learn-git</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>) </b></font><font color="#657B83"><b>✗</b></font> git log --oneline </pre><p>其中第一行是查看详细的提交信息，而第二行只是简略信息。</p><h2 id="·-打标签"><a href="#·-打标签" class="headerlink" title="· 打标签"></a>· 打标签</h2><p>假设正在写项目，通常需要发布版本号，或者标记工作已经完成一个部分的标志，这个时候就可以使用$GIT$中的打标记的命令，十分方便。</p><div class="table-container"><table><thead><tr><th style="text-align:left">命令</th><th style="text-align:left">案例</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>➜ git tag</code></td><td style="text-align:left"><code>➜ ~ git tag</code></td><td style="text-align:center">查看所有的<code>tag</code></td></tr><tr><td style="text-align:left"><code>➜ git show &lt;tag&gt;</code></td><td style="text-align:left"><code>➜ ~ git show v1.4</code></td><td style="text-align:center">查看<code>tag: v1.4</code>在本地仓库的具体信息</td></tr><tr><td style="text-align:left"><code>➜ git tag -l &lt;option&gt;</code></td><td style="text-align:left"><code>➜ ~ git tag -l &quot;v1.*&quot;</code></td><td style="text-align:center">查找所有<code>tag</code>中符合<code>option</code>条件的<code>tag</code></td></tr><tr><td style="text-align:left"><code>➜ git tag -a &lt;tag&gt; -m &lt;else&gt;</code></td><td style="text-align:left"><code>➜ ~ git tag -a v1.2 -m &quot;lol&quot;</code></td><td style="text-align:center">创建附注标签</td></tr><tr><td style="text-align:left"><code>➜ git tag &lt;tag&gt; -lw</code></td><td style="text-align:left"><code>➜ ~ git tag v2.12 -lw</code></td><td style="text-align:center">打轻量标签</td></tr></tbody></table></div><blockquote><p>详细可以查询 | <a href="https://git-scm.com/book/zh/v2/Git-%E5%9F%BA%E7%A1%80-%E6%89%93%E6%A0%87%E7%AD%BE" target="_blank" rel="noopener">Git-Book</a></p></blockquote><h2 id="·-使用远程仓库"><a href="#·-使用远程仓库" class="headerlink" title="· 使用远程仓库"></a>· 使用远程仓库</h2><h3 id="获取远程仓库和查看仓库配置的远程服务器"><a href="#获取远程仓库和查看仓库配置的远程服务器" class="headerlink" title="获取远程仓库和查看仓库配置的远程服务器"></a>获取远程仓库和查看仓库配置的远程服务器</h3><ul><li>使用<code>➜  ~ git clone &lt;url/git&gt;</code>获取远程服务器</li><li>使用<code>➜  ~ git remote</code>查看远程服务器的简写<ul><li>使用<code>➜  ~ git remote -v</code>查看远程服务器的简写和对应的url</li></ul></li></ul><p><strong>实践如下:</strong></p><pre><font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>Documents</b></font> git clone https://github.com/schacon/ticgitCloning into &apos;ticgit&apos;...remote: Enumerating objects: 1857, done.remote: Total 1857 (delta 0), reused 0 (delta 0), pack-reused 1857Receiving objects: 100% (1857/1857), 334.06 KiB | 3.00 KiB/s, done.Resolving deltas: 100% (837/837), done.<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>Documents</b></font> cd ticgit <font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>ticgit</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> git remote origin<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>ticgit</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> git remote -v     origin    https://github.com/schacon/ticgit (fetch)origin    https://github.com/schacon/ticgit (push)</pre><h3 id="添加-改名和删除远程仓库和详细查询"><a href="#添加-改名和删除远程仓库和详细查询" class="headerlink" title="添加,改名和删除远程仓库和详细查询"></a>添加,改名和删除远程仓库和详细查询</h3><ul><li>使用<code>➜  ~ git remote add &lt;shortname&gt; &lt;url&gt;</code> 添加一个新的远程仓库</li></ul><p><strong>实践如下:</strong></p><pre><font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>ticgit</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> git remote add pb https://github.com/paulboone/ticgit<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>ticgit</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> git remote -v                                        origin    https://github.com/schacon/ticgit (fetch)origin    https://github.com/schacon/ticgit (push)pb    https://github.com/paulboone/ticgit (fetch)pb    https://github.com/paulboone/ticgit (push)</pre><hr><ul><li>使用<code>➜  ~ git remote rename &lt;oldname&gt; &lt;newname&gt;</code> 仔细查询远程仓库的信息</li><li>使用<code>➜  ~ git remote show &lt;shortname&gt;</code> 仔细查询远程仓库的信息</li><li>使用<code>➜  ~ git remote remove &lt;shortname&gt;</code> 删除一个远程仓库</li></ul><p><strong>实践如下:</strong></p><pre><font color="#CB4B16"><b>➜  </b></font><font color="#93A1A1"><b>ticgit</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> git remote rename pb paul<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>ticgit</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> git remoteoriginpaul<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>ticgit</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> git remote show paul* remote paul  Fetch URL: https://github.com/paulboone/ticgit  Push  URL: https://github.com/paulboone/ticgit  HEAD branch: master  Remote branches:    master new (next fetch will store in remotes/paul)    ticgit new (next fetch will store in remotes/paul)  Local ref configured for &apos;git push&apos;:    master pushes to master (local out of date)<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>ticgit</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> git remote remove paul<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>ticgit</b></font> <font color="#839496"><b>git:(</b></font><font color="#CB4B16"><b>master</b></font><font color="#839496"><b>)</b></font> git remoteorigin</pre><h2 id="·-使用自定义命令"><a href="#·-使用自定义命令" class="headerlink" title="· 使用自定义命令"></a>· 使用自定义命令</h2><p>有时候我们需要经常使用相同的一连串的命令，或者使用自己喜欢的符号来表示莫种命令，这时候就需要使用$GIT$的自定义命令功能来简便操作了。</p><ul><li><strong>直接在命令行中设置别名</strong></li></ul><pre><font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>~</b></font> git config --global alias.new &apos;checkout -b&apos;<font color="#586E75"><b>➜  </b></font><font color="#93A1A1"><b>~</b></font> git config --global alias.co checkout</pre><ul><li><strong>在<code>~/.gitconfig</code>中设置别名</strong></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">...</span><br><span class="line">[alias]</span><br><span class="line">co = checkout</span><br><span class="line">new = checkout -b</span><br></pre></td></tr></table></figure><h1 id="Step-3-我与-Git-的故事"><a href="#Step-3-我与-Git-的故事" class="headerlink" title="Step 3. 我与$Git$的故事"></a>Step 3. 我与$Git$的故事</h1><p>关于我与$Git$的故事，那时候是刚上大学的时候，憨憨的使用着人工管理文件，那时候还不会使用$Github$这种有意思的东西，<del>虽然现在也不会使用2333</del>，却也还是在发呆的日子里，绑定了$Github$上面自己的$repo$开始了远程仓库之旅，那时候蛮傻的，只会$push$和$pull$这些操作，就连每次最基本的配置都要上网，寻找资料，才能完美的将$Github$和自己的机子慢慢的绑定，就这样过了一些日子(<strong>两年</strong>)。终于接触到了提交更改，为开源社区做贡献(修改错别字)的时候，那时候只能上网寻找教程的自己，意识到了自己关于理解$Git$的浅显，完全就如同一个阿三一样，只知道嗷嗷呜呜，呜呜嗷嗷。</p><p>然后就在暑假真正向着门里面的世界开始慢慢前行了。</p><h1 id="Else-参考书籍"><a href="#Else-参考书籍" class="headerlink" title="Else. 参考书籍"></a>Else. 参考书籍</h1><p><strong>Git - Book</strong> | <a href="https://Git-scm.com/book/zh/v2" target="_blank" rel="noopener"><strong>Here</strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;$Git$分布式管理系统学习指&lt;del&gt;北&lt;/del&gt;南。&lt;/p&gt;
&lt;p&gt;本文主要介绍$Git$的&lt;strong&gt;基本使用方法&lt;/strong&gt;，未涉及关于$Github$的内容。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;!!本文写于Linux环境下，若是window环境需自己酌情更改。!!&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="胡搞瞎搞💥" scheme="http://mirasire.xyz/categories/%E8%83%A1%E6%90%9E%E7%9E%8E%E6%90%9E%F0%9F%92%A5/"/>
    
    
      <category term="Git" scheme="http://mirasire.xyz/tags/GIT/"/>
    
      <category term="软件" scheme="http://mirasire.xyz/tags/%E8%BD%AF%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>POJ 2912 Rochambeau </title>
    <link href="http://mirasire.xyz/2020/02/17/POJ2912/"/>
    <id>http://mirasire.xyz/2020/02/17/POJ2912/</id>
    <published>2020-02-17T14:29:27.000Z</published>
    <updated>2020-09-22T14:42:34.784Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Tag: 带权并查集,枚举</em></strong></p><blockquote><p>题目链接 | <a href="https://vjudge.net/problem/POJ-2912#author=0" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p><strong>author: shuri001</strong></p><p>$n$个小伙伴进行猜拳游戏，除了一个比较聪明的家伙以外，其他人只会出单一的一种，给出$m$种猜拳的结果，要求找出那个比较聪明的小伙伴序号，并且输出在第几次猜拳可以确定?</p><blockquote><p>输入</p></blockquote><p><strong>多组案例输入。</strong></p><p>先输入$n$个人(编号从0开始)，$m$种结果，然后输出一行字符串代表结果。$( 1 \leq N \leq 500 \quad 0 \leq M \leq 2000 )$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">0</span>&lt;<span class="number">1</span></span><br><span class="line"><span class="number">1</span>&lt;<span class="number">2</span></span><br><span class="line"><span class="number">2</span>&lt;<span class="number">0</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span></span><br><span class="line"><span class="number">0</span>&lt;<span class="number">1</span></span><br><span class="line"><span class="number">0</span>&gt;<span class="number">1</span></span><br><span class="line"><span class="number">1</span>&lt;<span class="number">2</span></span><br><span class="line"><span class="number">1</span>&gt;<span class="number">2</span></span><br><span class="line"><span class="number">0</span>&lt;<span class="number">2</span></span><br><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">0</span>&lt;<span class="number">1</span></span><br><span class="line"><span class="number">0</span>&gt;<span class="number">1</span></span><br><span class="line"><span class="number">2</span>&lt;<span class="number">3</span></span><br><span class="line"><span class="number">2</span>&gt;<span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><p>如下所示。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Can <span class="keyword">not</span> determine</span><br><span class="line">Player <span class="number">1</span> can be determined to be the judge after <span class="number">4</span> lines</span><br><span class="line">Impossible</span><br><span class="line">Player <span class="number">0</span> can be determined to be the judge after <span class="number">0</span> lines</span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>观察发现直接判断裁判个数较为困难，并且数据规模较小(2e3*5e3)，因此可以使用对枚举每个人并判断是否是裁判来求解。</p><p>假设要判断第$i$人是否为裁判，只要合并与不含此人的结果，如果没有冲突，则此人可能为裁判。</p><p>由于题目给定只能存在一个裁判因此不可能出现多裁判的情况，所以枚举出来个数为<strong>0</strong>为不可能情况，而当个数<strong>&gt;0</strong>，则为无法分辨。</p><p>当个数为<strong>1</strong>的时候，我们显然知道这个就是裁判，但最小发现的行数如何寻找呢？起始只要仔细发现，我们在排除枚举时候，其他矛盾才能确定当前枚举的人不是裁判。</p><p>所以我们只要选择枚举中所有出现矛盾的行数的(位置)最靠后一行即可。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> dsu[maxn],val[maxn];</span><br><span class="line"><span class="keyword">int</span> u[<span class="number">2200</span>],v[<span class="number">2200</span>];</span><br><span class="line"><span class="keyword">char</span> op[<span class="number">2200</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n*<span class="number">3</span>; i++) dsu[i]=i,val[i]=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dsu[u]!=u) &#123; <span class="keyword">int</span> k=dsu[u]; dsu[u]=find(k); val[u]=(val[u]+val[k])%<span class="number">3</span>; &#125;</span><br><span class="line">    <span class="keyword">return</span> dsu[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=find(a),fb=find(b);</span><br><span class="line">    <span class="keyword">if</span>(fa==fb) <span class="keyword">return</span> ((val[fa]+val[a]-val[b])%<span class="number">3</span>+<span class="number">3</span>)%<span class="number">3</span>!=k;</span><br><span class="line">    dsu[fa]=fb;</span><br><span class="line">    val[fa]=((val[b]+k-val[a])%<span class="number">3</span>+<span class="number">3</span>)%<span class="number">3</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> k,pos,idx,n,m,cnt;</span><br><span class="line">    <span class="keyword">bool</span> flag;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m) &#123;</span><br><span class="line">        <span class="keyword">if</span>(n==<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Player 0 can be determined to be the judge after 0 lines\n"</span>;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        pos=idx=cnt=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) <span class="built_in">cin</span> &gt;&gt; u[i] &gt;&gt; op[i] &gt;&gt; v[i];</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            init(n);</span><br><span class="line">            flag=<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(u[j]==i || v[j]==i) <span class="keyword">continue</span>;</span><br><span class="line">                <span class="keyword">if</span>(op[j]==<span class="string">'&lt;'</span>) k=<span class="number">1</span>;</span><br><span class="line">                <span class="keyword">else</span> <span class="keyword">if</span>(op[j]==<span class="string">'&gt;'</span>) k=<span class="number">2</span>;</span><br><span class="line">                <span class="keyword">else</span> k=<span class="number">0</span>;</span><br><span class="line">                <span class="keyword">if</span>(merge(u[j],v[j],k)) &#123;</span><br><span class="line">                    pos=max(pos,j);</span><br><span class="line">                    flag=<span class="number">0</span>;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>(flag) &#123;</span><br><span class="line">                cnt++;</span><br><span class="line">                idx=i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(cnt==<span class="number">0</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Impossible\n"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(cnt&gt;<span class="number">1</span>) <span class="built_in">cout</span> &lt;&lt; <span class="string">"Can not determine\n"</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"Player "</span> &lt;&lt; idx &lt;&lt; <span class="string">" can be determined to be the judge after "</span> &lt;&lt; (pos+<span class="number">1</span>) &lt;&lt; <span class="string">" lines\n"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Tag: 带权并查集,枚举&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目链接 | &lt;a href=&quot;https://vjudge.net/problem/POJ-2912#author=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="POJ" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/POJ/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="dsu" scheme="http://mirasire.xyz/tags/DSU/"/>
    
      <category term="POJ" scheme="http://mirasire.xyz/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1984 Navigation Nightmare</title>
    <link href="http://mirasire.xyz/2020/02/15/POJ1984/"/>
    <id>http://mirasire.xyz/2020/02/15/POJ1984/</id>
    <published>2020-02-15T15:18:27.000Z</published>
    <updated>2020-09-22T14:42:34.784Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Tag: 带权并查集</em></strong></p><blockquote><p>题目链接 | <a href="https://vjudge.net/problem/POJ-1984#author=0" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有$n$个网格状的农田，每个农田之间有距离，会依次给出关系，在给出关系后询问两个农田之间的曼哈顿距离是多少？若无法判断则输出<strong>-1</strong></p><blockquote><p>输入</p></blockquote><p><strong>!!多组案例输入!!</strong></p><p>对于每组案例:<br>首先输入两个数字$n$和$m$，表示有$n$块农田，农田从<strong>1</strong>开始编号。<br>接下来$m$行，每行给出$a,b,l,d$，$a$和$b$表示农田的编号，$l$表示之间的距离，$d$表示$b$在$a$的$d$侧(只有四种,北-$N$,南-$S$,西-$W$,东-$E$)。<br>然后输入一个数字$k$，代表询问次数。<br>之后输入$k$行，每行有三个数字$a,b,c$，表示在$c$行后询问$a,b$间的曼哈顿距离是多少?</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">7</span> <span class="number">6</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">13</span> E</span><br><span class="line"><span class="number">6</span> <span class="number">3</span> <span class="number">9</span> E</span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">7</span> S</span><br><span class="line"><span class="number">4</span> <span class="number">1</span> <span class="number">3</span> N</span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">20</span> W</span><br><span class="line"><span class="number">4</span> <span class="number">7</span> <span class="number">2</span> S</span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">4</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">6</span> <span class="number">6</span></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><p><strong>!!!多组输出，需要在每两组输出间空一行!!!</strong></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">13</span></span><br><span class="line"><span class="number">-1</span></span><br><span class="line"><span class="number">10</span></span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由于询问不是实时给出，所以显然需要<strong>离线</strong>处理。选取$N,E$作为正方向，接下来只要按照带权并查集，合并即可，由于是有两个参数，所以将$x,y$分开维护。</p><p>但是要注意在维护$x,y$需要同时维护，当维护$x$的差值时候，需要注意此时维护的$y$的差值为<strong>0</strong>，之后使用套用常规带权并查集即可。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pbk push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> dsu[maxn],x[maxn],y[maxn];</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="built_in">vector</span>&lt;pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; &gt; &gt; qry;</span><br><span class="line">pair&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; rela[maxn];</span><br><span class="line"><span class="keyword">int</span> wgt[maxn];</span><br><span class="line"><span class="keyword">char</span> dir[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123; <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) dsu[i]=i; &#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(dsu[u] != u) &#123;</span><br><span class="line">        <span class="keyword">int</span> k = dsu[u];</span><br><span class="line">        dsu[u]=find(dsu[u]);</span><br><span class="line">        x[u]+=x[k]; y[u]+=y[k];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> dsu[u];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeX</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=find(a),fb=find(b);</span><br><span class="line">    dsu[fa]=fb;</span><br><span class="line">    x[fa] = k-x[a]+x[b];</span><br><span class="line">    y[fa] = -y[a]+y[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mergeY</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> k)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=find(a),fb=find(b);</span><br><span class="line">    dsu[fa]=fb;</span><br><span class="line">    y[fa] = k-y[a]+y[b];</span><br><span class="line">    x[fa] = -x[a]+x[b];</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">query</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=find(a),fb=find(b);</span><br><span class="line">    <span class="keyword">if</span>(fa!=fb) <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">abs</span>(x[a]-x[b])+<span class="built_in">abs</span>(y[a]-y[b]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n,m,k;</span><br><span class="line">    <span class="keyword">int</span> u,v,idx;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    init(n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) <span class="built_in">cin</span> &gt;&gt; rela[i].fi &gt;&gt; rela[i].se &gt;&gt; wgt[i] &gt;&gt; dir[i];</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;k; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v &gt;&gt; idx;</span><br><span class="line">        qry[idx].pbk(mkp(u,v));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(dir[i]==<span class="string">'W'</span> || dir[i]==<span class="string">'E'</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span>(dir[i]==<span class="string">'W'</span>) mergeX(rela[i].fi,rela[i].se,-wgt[i]);</span><br><span class="line">            <span class="keyword">else</span> mergeX(rela[i].fi,rela[i].se,wgt[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span>(dir[i]==<span class="string">'S'</span>) mergeY(rela[i].fi,rela[i].se,-wgt[i]);</span><br><span class="line">            <span class="keyword">else</span> mergeY(rela[i].fi,rela[i].se,wgt[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(!qry[i].empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> size=qry[i].size();</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;size; j++) &#123;</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; query(qry[i][j].fi,qry[i][j].se) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Tag: 带权并查集&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目链接 | &lt;a href=&quot;https://vjudge.net/problem/POJ-1984#author=0&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="POJ" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/POJ/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="带权并查集" scheme="http://mirasire.xyz/tags/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="POJ" scheme="http://mirasire.xyz/tags/POJ/"/>
    
      <category term="离线" scheme="http://mirasire.xyz/tags/%E7%A6%BB%E7%BA%BF/"/>
    
  </entry>
  
  <entry>
    <title>POJ 1733 Parity game</title>
    <link href="http://mirasire.xyz/2020/02/10/POJ1733/"/>
    <id>http://mirasire.xyz/2020/02/10/POJ1733/</id>
    <published>2020-02-10T09:29:10.000Z</published>
    <updated>2020-09-22T14:42:34.784Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Tag: 离散化+带权并查集,dsu,Kuangbin</em></strong></p><blockquote><p>题目链接 | <a href="https://vjudge.net/problem/POJ-1733#author=zuodiedai" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出$k$条信息，每条信息表示一个区间内($[l,r]$)的$1$的个数为奇数($odd$)或是偶数($even$)。问从$1$开始，连续正确的信息为几条？</p><p><strong><em>tips:</em></strong> $1 \leq l \leq r \leq 1e9 \quad 1 \leq k \leq 5000$</p><blockquote><p>输入</p></blockquote><p>第一行给出$n$代表区间的总长度为$[1,n]$<br>第二行给出$k$代表有$k$条信息<br>接下来$k$行，每行给出$l,r$代表区间，后面一个字符串代表一的个数是奇数($odd$)还是偶数($even$)。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span><span class="comment">//n</span></span><br><span class="line"><span class="number">5</span><span class="comment">//k</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> even<span class="comment">//l=1 r=2 even</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> odd</span><br><span class="line"><span class="number">5</span> <span class="number">6</span> even</span><br><span class="line"><span class="number">1</span> <span class="number">6</span> even</span><br><span class="line"><span class="number">7</span> <span class="number">10</span> odd</span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由于区间的范围很大，不能直接开这么大的数组进行对应，而询问较小，所以我们需要对输入的区间范围进行<strong>离散化</strong>，之后使用<strong>带权并查集</strong>求解即可。</p><p>这边令<strong>奇数</strong>权为$1$，<strong>偶数</strong>权为$0$即可。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;map&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;utility&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pir pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pbk push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(v) v.begin(),v.end()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e3</span>+<span class="number">100</span>;</span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; idx;</span><br><span class="line">pir p[maxn];</span><br><span class="line"><span class="keyword">int</span> f[maxn&lt;&lt;<span class="number">1</span>],v[maxn&lt;&lt;<span class="number">1</span>],k[maxn&lt;&lt;<span class="number">1</span>],arr[maxn&lt;&lt;<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) f[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> u)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(f[u] != u) &#123;</span><br><span class="line">        <span class="keyword">int</span> t=f[u];</span><br><span class="line">        f[u] = find(f[u]);</span><br><span class="line">        v[u] = (v[u]+v[t])%<span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> f[u];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=find(a),fb=find(b);</span><br><span class="line">    <span class="keyword">if</span>(fa!=fb) &#123;</span><br><span class="line">        f[fa] = fb;</span><br><span class="line">        v[fa] = ((v[b]+w-v[a])%<span class="number">2</span>+<span class="number">2</span>)%<span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (((v[a]+v[fa]-v[b])%<span class="number">2</span>+<span class="number">2</span>)%<span class="number">2</span>==w);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> n,m,a,b,cnt=<span class="number">0</span>;</span><br><span class="line">    <span class="built_in">string</span> str;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b &gt;&gt; str;</span><br><span class="line">        a--;</span><br><span class="line">        arr[cnt++] = a; arr[cnt++] = b;</span><br><span class="line">        p[i].fi = a; p[i].se = b;</span><br><span class="line">        <span class="keyword">if</span>(str == <span class="string">"even"</span>) k[i]=<span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> k[i]=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*=============discretization===============*/</span></span><br><span class="line">    sort(arr,arr+cnt);</span><br><span class="line">    cnt = unique(arr,arr+cnt)-arr;</span><br><span class="line">    init(cnt);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;cnt; i++) idx[arr[i]] = i;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/*=============dsu===============*/</span></span><br><span class="line">    <span class="keyword">int</span> ans=m;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!merge(idx[p[i].fi],idx[p[i].se],k[i])) &#123;</span><br><span class="line">            ans=i;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Tag: 离散化+带权并查集,dsu,Kuangbin&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目链接 | &lt;a href=&quot;https://vjudge.net/problem/POJ-1733#author=zuodiedai&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="POJ" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/POJ/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="带权并查集" scheme="http://mirasire.xyz/tags/%E5%B8%A6%E6%9D%83%E5%B9%B6%E6%9F%A5%E9%9B%86/"/>
    
      <category term="dsu" scheme="http://mirasire.xyz/tags/DSU/"/>
    
      <category term="离散化" scheme="http://mirasire.xyz/tags/%E7%A6%BB%E6%95%A3%E5%8C%96/"/>
    
      <category term="POJ" scheme="http://mirasire.xyz/tags/POJ/"/>
    
  </entry>
  
  <entry>
    <title>P1057 传球游戏</title>
    <link href="http://mirasire.xyz/2020/02/05/P1057/"/>
    <id>http://mirasire.xyz/2020/02/05/P1057/</id>
    <published>2020-02-05T09:27:06.000Z</published>
    <updated>2020-09-22T14:42:34.784Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Tag: dp</em></strong> $ \quad $ <strong>| Level: yellow</strong></p><blockquote><p>题目链接 | <a href="https://www.luogu.com.cn/problem/P1057" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有$n$个人排成圆环传球，球从小李开始，每次只能向左，或者向右边传，总共能传$m$次，问<strong>有几种传法</strong>最终回到小李手中？</p><blockquote><p>输入</p></blockquote><p>$ 3 \leq n \leq 30 \ , \quad 1 \leq m \leq 30$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span> <span class="number">3</span><span class="comment">//n m</span></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span><span class="comment">//1-&gt;2-&gt;3-&gt;1 或 1-&gt;3-&gt;2-&gt;1</span></span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>首先考虑使用搜索，但是循环次数最多为$2^{30}$，所以抛弃，之后查询题解发现是使用$dp$<del>或者打表实现。</del></p><p>$dp[i][j]$代表经过$i$次传球后传到$j$的方案数，因此可以轻易的发现，此时方案数由<strong>上一轮</strong>的<strong>左边或者右边</strong>传球得来。</p><p>因此<strong>转移状态方程</strong>为:</p><script type="math/tex; mode=display">dp[i][j] = dp[i][j-1] + dp[i][j+1]</script><p>只需对边界($1,n$)进行特殊处理便可。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line">ll dp[<span class="number">35</span>][<span class="number">35</span>],n,m;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    dp[<span class="number">0</span>][<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=m; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;=n; j++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(j==<span class="number">1</span>) dp[i][j]=dp[i<span class="number">-1</span>][n]+dp[i<span class="number">-1</span>][<span class="number">2</span>];</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(j==n) dp[i][j]=dp[i<span class="number">-1</span>][<span class="number">1</span>]+dp[i<span class="number">-1</span>][j<span class="number">-1</span>];</span><br><span class="line">            <span class="keyword">else</span> dp[i][j]=dp[i<span class="number">-1</span>][j<span class="number">-1</span>]+dp[i<span class="number">-1</span>][j+<span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; dp[m][<span class="number">1</span>] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Tag: dp&lt;/em&gt;&lt;/strong&gt; $ \quad $ &lt;strong&gt;| Level: yellow&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目链接 | &lt;a href=&quot;https://www.luogu.com.cn/problem/P1057&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LuoGu" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/LUOGU/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="dp" scheme="http://mirasire.xyz/tags/DP/"/>
    
      <category term="LuoGu" scheme="http://mirasire.xyz/tags/LUOGU/"/>
    
  </entry>
  
  <entry>
    <title>P1653 猴子</title>
    <link href="http://mirasire.xyz/2020/02/01/P1653/"/>
    <id>http://mirasire.xyz/2020/02/01/P1653/</id>
    <published>2020-02-01T13:35:27.000Z</published>
    <updated>2020-09-22T14:42:34.784Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>Tag: 反向并查集。</em></strong></p><blockquote><p>题目链接 | <a href="https://www.luogu.org/problem/P1653" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><blockquote><p><a href="https://www.luogu.org/problem/P1653" target="_blank" rel="noopener"><strong>Click Here</strong></a></p></blockquote><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pbk push_back</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> fi first</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> se second</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pir pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn],ans[maxn],n,m,ccnt,ttm;</span><br><span class="line">pir p[maxn];</span><br><span class="line"><span class="keyword">bool</span> vis[maxn],uni[maxn][<span class="number">3</span>];</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; e[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(vis[a]) <span class="keyword">return</span>;</span><br><span class="line">    vis[a]=<span class="number">1</span>; ans[a]=ttm; ccnt++;</span><br><span class="line">    <span class="keyword">int</span> end=e[a].size();</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;end; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span>&amp; b=e[a][i];</span><br><span class="line">        <span class="keyword">if</span>(vis[b]) <span class="keyword">continue</span>;</span><br><span class="line">        dfs(b);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">find</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> r=a,tp;</span><br><span class="line">    <span class="keyword">while</span>(f[a]!=a) a=f[a];</span><br><span class="line">    <span class="keyword">while</span>(f[r]!=a) &#123;</span><br><span class="line">        tp=f[r];</span><br><span class="line">        f[r]=a;</span><br><span class="line">        r=tp;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> fa=find(a),fb=find(b);</span><br><span class="line">    <span class="keyword">if</span>(fa==fb) <span class="keyword">return</span>;</span><br><span class="line">    <span class="keyword">if</span>(fa==<span class="number">1</span>) &#123;</span><br><span class="line">        f[fb]=fa;</span><br><span class="line">        dfs(fb);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span>(fb==<span class="number">1</span>) &#123;</span><br><span class="line">        f[fa]=fb;</span><br><span class="line">        dfs(fa);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        f[fb]=fa;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;pir&gt; tmp;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    <span class="keyword">int</span> a,b;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    ccnt=<span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) f[i]=i,ans[i]=<span class="number">-1</span>,uni[i][<span class="number">1</span>]=uni[i][<span class="number">2</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cin</span> &gt;&gt; p[i].fi &gt;&gt; p[i].se;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">        uni[a][b]=<span class="number">0</span>;</span><br><span class="line">        tmp.pbk(mkp(a,b));</span><br><span class="line">    &#125;</span><br><span class="line">    ttm=<span class="number">-1</span>;</span><br><span class="line">    ans[<span class="number">1</span>]=<span class="number">-1</span>,vis[<span class="number">1</span>]=<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> &amp;j1 = p[i].fi;</span><br><span class="line">        <span class="keyword">int</span> &amp;j2 = p[i].se;</span><br><span class="line">        <span class="keyword">if</span>(uni[i][<span class="number">1</span>]&amp;&amp;j1!=<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; "i="&lt;&lt; i &lt;&lt; " " &lt;&lt; "j1=" &lt;&lt; j1&lt;&lt; endl;</span></span><br><span class="line">            merge(i,j1);</span><br><span class="line">            e[i].pbk(j1); e[j1].pbk(i);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(uni[i][<span class="number">2</span>]&amp;&amp;j2!=<span class="number">-1</span>) &#123;</span><br><span class="line">            <span class="comment">//cout &lt;&lt; "i="&lt;&lt; i &lt;&lt; " " &lt;&lt; "j2=" &lt;&lt; j2&lt;&lt; endl;</span></span><br><span class="line">            merge(i,j2);</span><br><span class="line">            e[i].pbk(j2); e[j2].pbk(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> u,v,k;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=m<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">        ttm=i;</span><br><span class="line">        u = tmp[i].fi,k = tmp[i].se;</span><br><span class="line">        <span class="keyword">if</span>(k==<span class="number">1</span>) &#123;</span><br><span class="line">            v=p[u].fi;</span><br><span class="line">            e[u].pbk(v); e[v].pbk(u);</span><br><span class="line">            merge(u,v);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            v=p[u].se;</span><br><span class="line">            e[u].pbk(v); e[v].pbk(u);</span><br><span class="line">            merge(u,v);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cout</span> &lt;&lt; ans[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;Tag: 反向并查集。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目链接 | &lt;a href=&quot;https://www.luogu.org/problem/P1653&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="LuoGu" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/LUOGU/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="LuoGu" scheme="http://mirasire.xyz/tags/LUOGU/"/>
    
      <category term="dsu,bfs" scheme="http://mirasire.xyz/tags/DSU-BFS/"/>
    
      <category term="spfa" scheme="http://mirasire.xyz/tags/SPFA/"/>
    
  </entry>
  
  <entry>
    <title>CodeForces-EducationRound#78 题解报告</title>
    <link href="http://mirasire.xyz/2020/01/16/CodeForceER78/"/>
    <id>http://mirasire.xyz/2020/01/16/CodeForceER78/</id>
    <published>2020-01-16T06:02:33.000Z</published>
    <updated>2020-09-22T14:42:34.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>CodeForces-EducationalRound#78 | <a href="https://codeforces.com/contest/1278" target="_blank" rel="noopener"><strong>Here</strong></a><br>题解代码 | <a href=""><strong>Here</strong></a></p></blockquote><a id="more"></a><h1 id="A-Shuffle-Hashing"><a href="#A-Shuffle-Hashing" class="headerlink" title="A. Shuffle Hashing"></a>A. Shuffle Hashing</h1><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>给出两个字符串$s1,s2$，问是否能在$s2$中找到一串连续的字符串，使得与$s1$相似?</p><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>由于数据范围很小所以可以使用$O(n^2)$的算法，从头开始暴力匹配去解决问题。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(v) v.begin(),v.end()</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">int</span> n;</span><br><span class="line">  <span class="built_in">string</span> str1,str2;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">while</span>(n--) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; str1 &gt;&gt; str2;</span><br><span class="line">    <span class="keyword">if</span>(str1.size() &gt; str2.size()) &#123;</span><br><span class="line">      <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">      <span class="keyword">continue</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(all(str1));</span><br><span class="line">    <span class="keyword">int</span> size2= str2.size();</span><br><span class="line">    <span class="keyword">int</span> size1= str1.size();</span><br><span class="line">    <span class="keyword">bool</span> flag = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;size2; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(i+size1<span class="number">-1</span> &gt;= size2) <span class="keyword">break</span>;</span><br><span class="line">      <span class="built_in">string</span> tmp = str2.substr(i,size1);</span><br><span class="line">      sort(all(tmp));</span><br><span class="line">      <span class="keyword">if</span>(tmp==str1) &#123;</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">        flag = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(flag) <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="B-A-and-B"><a href="#B-A-and-B" class="headerlink" title="B. A and B"></a>B. A and B</h1><h2 id="题意-1"><a href="#题意-1" class="headerlink" title="题意"></a>题意</h2><p>给出两个数字$a,b$，问最少经过多少轮可以使得$a=b$?</p><p>第$k$轮可以选择对$a$ 或 $b$加$k$，每一轮都不可跳过。</p><h2 id="题解-1"><a href="#题解-1" class="headerlink" title="题解"></a>题解</h2><p>仔细发现操作即将$1,2,3,4,5,…,n$，这个数列分成两部分，使得两部分之差的绝对值与$a-b$的绝对值(下文称之为$diff$)相等。</p><script type="math/tex; mode=display">\begin{aligned}sum &= (1+n)*n/2  \quad  &x_0 + x_1 &= sum \quad  (x_0 > x_1 >= 0) \\& \quad &x_0 - x_1 &= diff \\\Rightarrow2x_1 &= sum+diff \\4x_1 &= (1+n)*n - 2diff \\\end{aligned}</script><p>因此只要保证$[(1+n)*n + 2diff] \mod 4 = 0$ 即可，由于$x_0&gt;x_1&gt;=0$，因此$sum&gt;diff$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">int</span> t;</span><br><span class="line">  ll a,b,diff;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">  <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; a &gt;&gt; b;</span><br><span class="line">    diff = <span class="built_in">abs</span>(a-b);</span><br><span class="line">    <span class="keyword">if</span>(a==b) &#123; <span class="built_in">cout</span> &lt;&lt; <span class="number">0</span> &lt;&lt; <span class="built_in">endl</span>; <span class="keyword">continue</span>; &#125;</span><br><span class="line">    diff &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    a = <span class="built_in">sqrt</span>(diff); b = a+<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span>(a*b&lt;diff) a++,b++;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">abs</span>(a*b-diff)%<span class="number">4</span>!=<span class="number">0</span>) a++,b++;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; a &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="C-Berry-Jam"><a href="#C-Berry-Jam" class="headerlink" title="C. Berry Jam"></a>C. Berry Jam</h1><h2 id="题意-2"><a href="#题意-2" class="headerlink" title="题意"></a>题意</h2><p>中间有一个楼梯，楼梯左右都放着$n$个果酱，果酱只有两种分别标记为$1，2$，通道很狭隘，每次只能从楼梯处搬出一个果酱(即<strong>左/右</strong>边最靠近楼梯的)。</p><p><strong>问:</strong> 最少搬出多少能，让通道内的$1$号果酱个数=$2$号果酱个数？</p><h2 id="题解-2"><a href="#题解-2" class="headerlink" title="题解"></a>题解</h2><p>数据范围是$1e5$，所以做法的时间复杂度必为$O(n\log{n})$。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> debug(x) cout &lt;&lt; #x &lt;&lt; <span class="meta-string">" = "</span> &lt;&lt; x &lt;&lt; endl;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> arr[maxn];</span><br><span class="line"><span class="keyword">int</span> tp[maxn];</span><br><span class="line"></span><br><span class="line"><span class="built_in">map</span>&lt;<span class="keyword">int</span>,<span class="keyword">int</span>&gt; lft;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">int</span> t,n,tmp;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; t;</span><br><span class="line">  <span class="keyword">while</span>(t--) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    arr[<span class="number">0</span>]=<span class="number">0</span>;</span><br><span class="line">    lft.clear();</span><br><span class="line">    <span class="comment">//input arr1</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123; </span><br><span class="line">      <span class="built_in">cin</span> &gt;&gt; tp[i]; </span><br><span class="line">      <span class="keyword">if</span>(tp[i]==<span class="number">1</span>) arr[i] = arr[i<span class="number">-1</span>]<span class="number">-1</span>;</span><br><span class="line">      <span class="keyword">else</span> arr[i] = arr[i<span class="number">-1</span>]+<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//input arr2</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=<span class="number">1</span>; i--) &#123; <span class="built_in">cin</span> &gt;&gt; tp[i]; &#125;</span><br><span class="line">    <span class="keyword">int</span> now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">      <span class="keyword">if</span>(tp[i]==<span class="number">1</span>) now--;</span><br><span class="line">      <span class="keyword">else</span> now++;</span><br><span class="line">      lft[now] = i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> mx = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">      <span class="keyword">int</span> idx = lft[<span class="number">-1</span>*arr[i]];</span><br><span class="line">      <span class="keyword">if</span>(idx) mx = max(mx,i+idx);</span><br><span class="line">      <span class="keyword">if</span>(arr[i] == <span class="number">0</span>) mx = max(mx,i);</span><br><span class="line">    &#125;</span><br><span class="line">    mx = max(mx,lft[<span class="number">0</span>]);</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; (n*<span class="number">2</span>-mx) &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="D-Segment-Tree"><a href="#D-Segment-Tree" class="headerlink" title="D. Segment Tree"></a>D. Segment Tree</h1><h2 id="题意-3"><a href="#题意-3" class="headerlink" title="题意"></a>题意</h2><h2 id="题解-3"><a href="#题解-3" class="headerlink" title="题解"></a>题解</h2><p><strong>重要点:</strong> 如何在$O(1)$的时间复法杂度内完成合并的判断操作</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> mkp make_pair</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pir pair<span class="meta-string">&lt;int,int&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> all(v) v.begin(),v.end()</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="keyword">int</span> f[maxn],n;</span><br><span class="line"><span class="built_in">vector</span>&lt;pir&gt; grp;</span><br><span class="line">pir p[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) f[i]=i;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">getFa</span><span class="params">(<span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> tp,fa = a;</span><br><span class="line">  <span class="keyword">while</span>(f[a] != a) a = f[a];</span><br><span class="line">  <span class="keyword">while</span>(f[fa] != a) &#123;</span><br><span class="line">    tp = f[fa];</span><br><span class="line">    f[fa] = a;</span><br><span class="line">    fa = tp;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> a;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">set</span>&lt;pir&gt; st;</span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">check</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="keyword">int</span> t=n<span class="number">-1</span>;</span><br><span class="line">  <span class="keyword">int</span> i,j,r,fa,fb;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">auto</span> now: grp) &#123;</span><br><span class="line">    <span class="keyword">if</span>(st.count(now)) &#123;</span><br><span class="line">      st.erase(now);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      i = now.second;</span><br><span class="line">      r = p[i].second;</span><br><span class="line">      <span class="keyword">for</span>(<span class="keyword">auto</span> gp: st) &#123;</span><br><span class="line">        <span class="keyword">if</span>(gp.first &gt; r) <span class="keyword">break</span>;</span><br><span class="line">        t--;</span><br><span class="line">        j = gp.second;</span><br><span class="line">        fa = getFa(j);</span><br><span class="line">        fb = getFa(i);</span><br><span class="line">        <span class="keyword">if</span>(fa==fb) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">else</span> f[fa] = fb;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="keyword">if</span>(t&lt;<span class="number">0</span>) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">      st.insert(mkp(r,i));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> t==<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">int</span> a,b;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  init(n);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; p[i].first &gt;&gt; p[i].second;</span><br><span class="line">    grp.push_back(mkp(p[i].first,i));</span><br><span class="line">    grp.push_back(mkp(p[i].second,i));</span><br><span class="line">  &#125;</span><br><span class="line">  sort(all(grp));</span><br><span class="line">  <span class="keyword">if</span>(check()) <span class="built_in">cout</span> &lt;&lt; <span class="string">"YES\n"</span>;</span><br><span class="line">  <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; <span class="string">"NO\n"</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="本题总结"><a href="#本题总结" class="headerlink" title="本题总结"></a>本题总结</h2><p>在本题中遭遇了<strong>TLE</strong>，主要是在线段间的合并时，寻找可连接边的复杂度到达了$O(n)$，而题解中寻找可合并线段的复杂度为$O(1)$，因此使用前者的总时间复杂度为$O(n^2)$，主要花费在寻找可连接边上了，看似优化，实际木大木大，嗐….</p><h1 id="E-Tests-for-problem-D"><a href="#E-Tests-for-problem-D" class="headerlink" title="E. Tests for problem D"></a>E. Tests for problem D</h1><h2 id="题意-4"><a href="#题意-4" class="headerlink" title="题意"></a>题意</h2><p><strong>即构造D题的数据。</strong></p><h2 id="题解-4"><a href="#题解-4" class="headerlink" title="题解"></a>题解</h2><p>用包含的关系来防止构造出相交，因此在构造的时候为反向构造，即先构造的后收尾，后构造的先收尾。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> pbk push_back</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">5e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a[maxn];</span><br><span class="line"><span class="keyword">int</span> n,cnt;</span><br><span class="line"><span class="keyword">int</span> l[maxn],r[maxn];</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dfs</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> fa)</span> </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=a[u].size()<span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = a[u][i];</span><br><span class="line">    <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">    l[v]=cnt++;</span><br><span class="line">  &#125;</span><br><span class="line">  r[u]=cnt++;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;a[u].size(); i++) &#123;</span><br><span class="line">    <span class="keyword">int</span> v = a[u][i];</span><br><span class="line">    <span class="keyword">if</span>(v==fa) <span class="keyword">continue</span>;</span><br><span class="line">    dfs(v,u);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">  <span class="keyword">int</span> u,v;</span><br><span class="line">  <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n<span class="number">-1</span>; i++) &#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; u &gt;&gt; v;</span><br><span class="line">    a[u].pbk(v);</span><br><span class="line">    a[v].pbk(u);</span><br><span class="line">  &#125;</span><br><span class="line">  cnt = <span class="number">1</span>; l[<span class="number">1</span>]=cnt++;</span><br><span class="line">  dfs(<span class="number">1</span>,<span class="number">-1</span>);</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) <span class="built_in">cout</span> &lt;&lt; l[i] &lt;&lt; <span class="string">" "</span> &lt;&lt; r[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;CodeForces-EducationalRound#78 | &lt;a href=&quot;https://codeforces.com/contest/1278&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;br&gt;题解代码 | &lt;a href=&quot;&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="CodeForces" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/CODEFORCES/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="CodeForces" scheme="http://mirasire.xyz/tags/CODEFORCES/"/>
    
      <category term="Rated for Div.2" scheme="http://mirasire.xyz/tags/RATED-FOR-DIV-2/"/>
    
  </entry>
  
  <entry>
    <title>堆学习笔记 - 配对堆</title>
    <link href="http://mirasire.xyz/2020/01/12/pairheap/"/>
    <id>http://mirasire.xyz/2020/01/12/pairheap/</id>
    <published>2020-01-12T10:15:03.000Z</published>
    <updated>2020-09-22T14:42:34.788Z</updated>
    
    <content type="html"><![CDATA[<p>本文是配对堆的学习笔记，其中没有包括$decrease-key$操作</p><blockquote><p>配对堆的基础介绍 | <strong>不包含</strong>$decrease-key$操作</p><p>模板代码 | <a href="https://github.com/Mirasire/icpc-train/blob/master/Algorithms/DS/pairheap.cpp" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>本文主要介绍最小配对堆，当然也有最大配对堆。</p></blockquote><p>配对堆是一个<strong>带权多叉树</strong>(如图)，它一个可并堆，满足下述性质的即为最小配对堆。</p><ol><li>空堆是一个最小配对堆。</li><li>所有节点的权值都小于其子树的权值。</li></ol><blockquote><p>如下图即为一个<strong>最小配对堆</strong></p></blockquote><p><img src="/img/ph.jpg" alt="pairing-heap"></p><h2 id="配对堆的表示"><a href="#配对堆的表示" class="headerlink" title="配对堆的表示"></a>配对堆的表示</h2><p>由于<strong>配对堆</strong>是一棵多叉树，假设使用孩子表示法，对于每次新加入孩子，就需要动态开孩子节点，过程有点繁琐，所以我们使用兄弟孩子表示法来存储配对堆。</p><blockquote><p>孩子表示法 -&gt; 孩子兄弟表示法如下图所示</p></blockquote><p><img src="/img/phs.jpg" alt="pairing-heap-b/s"></p><p><strong>具体单个节点结构和代码实现如下图所示:</strong></p><p><img src="/img/pairnode+code.jpg" alt="pairing-node"></p><h2 id="可支持的操作"><a href="#可支持的操作" class="headerlink" title="可支持的操作"></a>可支持的操作</h2><p><strong>优秀的时间复杂度汇总</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">合并($merge$)</th><th style="text-align:center">删除最小值($delete-min$)</th><th style="text-align:center">插入($insert$)</th><th style="text-align:center">减小一个数的值($decrease-key$)</th></tr></thead><tbody><tr><td style="text-align:center">$O(1)$</td><td style="text-align:center">$O(\log{n})$</td><td style="text-align:center">$O(1)$</td><td style="text-align:center"><strong>TODO</strong></td></tr></tbody></table></div><h3 id="合并-merge"><a href="#合并-merge" class="headerlink" title="合并($merge$)"></a>合并($merge$)</h3><blockquote><p>图片未使用<strong>兄弟 / 孩子</strong>表示法，为正常的多叉树画法。</p></blockquote><p>配对堆的合并的做法十分粗暴，假设合并如下两个配对堆，我们需要比较<strong>堆1</strong>和<strong>堆2</strong>的最小值(即为根)，将次小的那个堆插入到最小的堆的根下，即，将右边的堆插入到左边的堆的根下，这样就完成合并了，因此复杂度显然是$O(1)$。</p><p><img src="/img/pairmerge.jpg" alt="pairing-node"></p><p>合并操作<strong>结果如下</strong>，红色为插入的堆。</p><p><img src="/img/afmerge.jpg" alt="pairing-node"></p><h3 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入($insert$)"></a>插入($insert$)</h3><p>插入可以看为一元素个数为1的配对堆合并，注意特判原来元素不存在的情况即可。</p><h3 id="查询最小值-get-min"><a href="#查询最小值-get-min" class="headerlink" title="查询最小值($get-min$)"></a>查询最小值($get-min$)</h3><p>由定义可知，返回根节点的值即可。</p><h3 id="删除最小值-delete-min"><a href="#删除最小值-delete-min" class="headerlink" title="删除最小值($delete-min$)"></a>删除最小值($delete-min$)</h3><p>尽管我们可以从左向右两两合并，但是这样的话时间复杂度必为$O(n)$，而目标的均摊复杂度为$O(\log{n})$，因此我们使用<strong>两步合并</strong>，使得均摊复杂度为$O(\log{n})$。</p><h4 id="第一步"><a href="#第一步" class="headerlink" title="第一步"></a>第一步</h4><p>如下图所示，<strong>从左向右</strong>，两两合并根节点的子树。</p><p><img src="/img/pairpass1.jpg" alt="Pass#1"></p><h4 id="第二步"><a href="#第二步" class="headerlink" title="第二步"></a>第二步</h4><p>如下图所示，第一步完成后，<strong>从右向左</strong>，将剩余的子树和最右边的子树合并。</p><p><img src="/img/pairpass2.jpg" alt="Pass#2"></p><h2 id="最小配对堆模板"><a href="#最小配对堆模板" class="headerlink" title="最小配对堆模板"></a><strong>最小配对堆</strong>模板</h2><blockquote><p>最小配对堆<br>模板代码 | <a href="https://github.com/Mirasire/icpc-train/blob/master/Algorithms/DS/pairheap.cpp" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>* <span class="title">PNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    PNode ch,br;</span><br><span class="line">    NODE() &#123;&#125;</span><br><span class="line">    NODE(<span class="keyword">int</span> _val):val(_val),ch(<span class="literal">nullptr</span>),br(<span class="literal">nullptr</span>) &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123; <span class="built_in">cout</span> &lt;&lt; val &lt;&lt; <span class="string">" "</span>; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">PAIRINGHEAP</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">        PNode root;</span><br><span class="line">        <span class="keyword">int</span> n;</span><br><span class="line">        PAIRINGHEAP() &#123; root = <span class="keyword">new</span> NODE(); n = <span class="number">0</span>; &#125;</span><br><span class="line">        PAIRINGHEAP(<span class="keyword">int</span> arr[],<span class="keyword">int</span> _size) &#123;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!n) &#123;root = <span class="keyword">new</span> NODE(val);&#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                PNode _add = <span class="keyword">new</span> NODE(val);</span><br><span class="line">                root = merge(root,_add);</span><br><span class="line">            &#125;</span><br><span class="line">            n++;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">PNode <span class="title">merge</span><span class="params">(PNode a,PNode b)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(a == <span class="literal">nullptr</span>) <span class="keyword">return</span> b;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(b == <span class="literal">nullptr</span>) <span class="keyword">return</span> a;</span><br><span class="line">            <span class="keyword">if</span>(a-&gt;val &gt; b-&gt;val) swap(a,b);</span><br><span class="line">            b-&gt;br = a-&gt;ch;</span><br><span class="line">            a-&gt;ch = b;</span><br><span class="line">            <span class="keyword">return</span> a;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">PNode <span class="title">mergeBro</span><span class="params">(PNode x)</span> </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(x==<span class="literal">nullptr</span> || x-&gt;br == <span class="literal">nullptr</span>) <span class="keyword">return</span> x;</span><br><span class="line">            PNode n1,n2;</span><br><span class="line">            n1 = x-&gt;br; n2 = n1-&gt;br;</span><br><span class="line">            n1-&gt;br = x-&gt;br = <span class="literal">nullptr</span>;</span><br><span class="line">            <span class="keyword">return</span> merge(merge(x,n1),mergeBro(n2));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">delMin</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            PNode tmp = root;</span><br><span class="line">            root = mergeBro(root-&gt;ch);</span><br><span class="line">            <span class="keyword">delete</span>(tmp);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function"><span class="keyword">int</span> <span class="title">getMin</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> root-&gt;val; &#125;</span><br><span class="line">        <span class="function"><span class="keyword">void</span> <span class="title">display</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="built_in">queue</span>&lt;PNode&gt; <span class="built_in">list</span>;</span><br><span class="line">            <span class="built_in">list</span>.push(root);</span><br><span class="line">            <span class="keyword">while</span>(!<span class="built_in">list</span>.empty()) &#123;</span><br><span class="line">                PNode tmp = <span class="built_in">list</span>.front();</span><br><span class="line">                <span class="built_in">list</span>.pop();</span><br><span class="line">                <span class="keyword">while</span>(tmp != <span class="literal">nullptr</span>) &#123;</span><br><span class="line">                    tmp-&gt;display();</span><br><span class="line">                    <span class="keyword">if</span>(tmp-&gt;ch != <span class="literal">nullptr</span>) <span class="built_in">list</span>.push(tmp-&gt;ch);</span><br><span class="line">                    tmp=tmp-&gt;br;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><p><a href="https://oi-wiki.org/ds/pairing-heap/" target="_blank" rel="noopener">配对堆 : <strong>OI-WIKI</strong></a><br><a href="https://brilliant.org/wiki/pairing-heap/" target="_blank" rel="noopener">Pairing Heap : <strong>brilliant</strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文是配对堆的学习笔记，其中没有包括$decrease-key$操作&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;配对堆的基础介绍 | &lt;strong&gt;不包含&lt;/strong&gt;$decrease-key$操作&lt;/p&gt;
&lt;p&gt;模板代码 | &lt;a href=&quot;https://github.com/Mirasire/icpc-train/blob/master/Algorithms/DS/pairheap.cpp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法和数据结构" scheme="http://mirasire.xyz/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构" scheme="http://mirasire.xyz/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://mirasire.xyz/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="Algorithm" scheme="http://mirasire.xyz/tags/ALGORITHM/"/>
    
      <category term="数据结构" scheme="http://mirasire.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="配对堆" scheme="http://mirasire.xyz/tags/%E9%85%8D%E5%AF%B9%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>如何的优雅展示代码?</title>
    <link href="http://mirasire.xyz/2020/01/07/VisualGitHistory/"/>
    <id>http://mirasire.xyz/2020/01/07/VisualGitHistory/</id>
    <published>2020-01-07T05:43:33.000Z</published>
    <updated>2020-09-22T14:42:34.784Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍<strong>git-history</strong>的安装和使用方法。</p><blockquote><p>作者：<strong>Rodrigo Pombo</strong><br><strong>Github</strong>项目地址 | <a href="https://github.com/pomber/git-history" target="_blank" rel="noopener"><strong>git-history</strong></a></p></blockquote><a id="more"></a><h1 id="起因"><a href="#起因" class="headerlink" title="起因"></a>起因</h1><p>昨天突发想，如何<strong>优雅的展示自己的代码</strong>和其<strong>git历史修改</strong>呢？</p><p>寻找了许久终于在<strong>github</strong>上面找到一个的工具(<strong>git-history</strong>)，该工具可以<strong>十分酷炫</strong>的展示自己代码和查看自己的历史修改，而且正巧也在使用途中遇到了些小插曲，嘛~，废话不多说开始正片。</p><h1 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h1><p><img src="/img/show.gif" alt="show"></p><h1 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h1><h2 id="在github上查看"><a href="#在github上查看" class="headerlink" title="在github上查看"></a>在github上查看</h2><p>在github上直接使用较为简单，只需要两个步骤。</p><ol><li>将原来的 URL 中的 <strong>github.com</strong> 换为<strong>githistory.xyz</strong>，其他不变。</li><li>刷新即可加载到查看界面。</li></ol><p>当然也支持浏览器插件。</p><blockquote><p>Firefox的插件地址 | <a href="https://addons.mozilla.org/en-US/firefox/addon/github-history/" target="_blank" rel="noopener"><strong>Here</strong></a><br>Chrome的插件地址 | <a href="https://chrome.google.com/webstore/detail/github-history-browser-ex/laghnmifffncfonaoffcndocllegejnf" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><p>在安装插件完成后，原来github上文件的<strong>History</strong>右边会出现<strong>Open in Git History</strong>(如下图)，点击<strong>Open in Git History</strong>按钮即可。</p><div class="table-container"><table><thead><tr><th style="text-align:center"><img src="/img/bp.PNG" alt="before"></th><th style="text-align:center"><img src="/img/ap.PNG" alt="after"></th></tr></thead><tbody><tr><td style="text-align:center"><em>安装插件前</em></td><td style="text-align:center"><em>安装插件后</em></td></tr></tbody></table></div><h2 id="在VsCode下查看"><a href="#在VsCode下查看" class="headerlink" title="在VsCode下查看"></a>在VsCode下查看</h2><p>在VsCode的插件中搜索Git File History，下载即可。</p><h2 id="本地查看"><a href="#本地查看" class="headerlink" title="本地查看"></a>本地查看</h2><p><strong>git-history</strong>也提供了<strong>cli</strong>来支持本地的查看。</p><h3 id="本地环境"><a href="#本地环境" class="headerlink" title="本地环境"></a>本地环境</h3><blockquote><ul><li>node.js | <strong>v12.12.0</strong></li><li>npm | <strong>6.11.3</strong></li><li>WSL | <strong>ubuntu 18.04 LTS</strong></li></ul></blockquote><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g git-file-history</span><br></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><p>假设当前目录下有一个heap.cpp，我们想要只需要在<strong>Terminal</strong> 中输入 <code>githistory heap.cpp</code>，之后会自动打开浏览器，显示heap.cpp的代码和其git的历史修改。</p><h3 id="调整"><a href="#调整" class="headerlink" title="调整"></a>调整</h3><p>由于我使用的是<strong>WSL</strong>所以不能自动打开浏览器，跳到目标的本地<strong>URL</strong>，而且十分不巧的是，<strong>git-history</strong>的<strong>Terminal</strong>提示十分笼统，假设按照提示打开浏览器，会都不显示，<del>因为这个原因我重装了好几遍，QWQ</del>，因此我们需要修改<strong>git-history</strong>的<strong>cli</strong>文件，来使得提示的<strong>URL</strong>更加具体。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">whereis githistory</span><br><span class="line"><span class="comment"># githistory: /opt/node-v12.12.0-linux-x64/bin/githistory</span></span><br></pre></td></tr></table></figure><p>之后使用<strong>cd</strong>和<strong>ll</strong>命令移动到<strong>git-file-history</strong>所在的位置</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /opt/node-v12.12.0-linux-x64/bin/</span><br><span class="line">ll githistory</span><br><span class="line"><span class="comment"># [略...] githistory -&gt; ../lib/node_modules/git-file-history/cli.js*</span></span><br><span class="line"><span class="built_in">cd</span> ../lib/node_modules/git-file-history/</span><br></pre></td></tr></table></figure><p>修改目录下的<strong>server.js</strong>，将其中的倒数第三行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Running at http://localhost:"</span> + port);</span><br></pre></td></tr></table></figure><p>修改为如下，并保存退出。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="string">"Running at http://localhost:"</span> + port + <span class="string">"/?path="</span> + <span class="built_in">encodeURIComponent</span>(path));</span><br></pre></td></tr></table></figure><p>此后再使用<strong>githistory</strong>时<strong>Terminal</strong>中的提示打开的URL，已经是精准的链接🔗，所以直接<code>C-c</code>和<code>C-v</code>到浏览器中，打开即可展示自己的代码，并查看自己git的历史修改。</p><h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>以上就是本文的全部了，感谢<strong>Rodrigo Pombo</strong>提供如此酷炫的工具，用来查看<strong>git</strong>的历史修改。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍&lt;strong&gt;git-history&lt;/strong&gt;的安装和使用方法。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;作者：&lt;strong&gt;Rodrigo Pombo&lt;/strong&gt;&lt;br&gt;&lt;strong&gt;Github&lt;/strong&gt;项目地址 | &lt;a href=&quot;https://github.com/pomber/git-history&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;git-history&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="胡搞瞎搞💥" scheme="http://mirasire.xyz/categories/%E8%83%A1%E6%90%9E%E7%9E%8E%E6%90%9E%F0%9F%92%A5/"/>
    
    
      <category term="软件" scheme="http://mirasire.xyz/tags/%E8%BD%AF%E4%BB%B6/"/>
    
      <category term="git-history" scheme="http://mirasire.xyz/tags/GIT-HISTORY/"/>
    
  </entry>
  
  <entry>
    <title>堆学习笔记 - 堆简介</title>
    <link href="http://mirasire.xyz/2020/01/06/HEAP1/"/>
    <id>http://mirasire.xyz/2020/01/06/HEAP1/</id>
    <published>2020-01-06T06:38:46.000Z</published>
    <updated>2020-09-22T14:42:34.780Z</updated>
    
    <content type="html"><![CDATA[<p>本文主要介绍了<strong>堆的基本知识</strong>和二叉堆中<strong>大根堆的具体实现</strong>。</p><blockquote><p><strong>堆</strong>是一种基础的数据，在寻找最大值或最小值的时候性能优秀，其中的斐波那契堆，最为出色。</p><p>模板代码 | <a href="https://github.com/Mirasire/icpc-train/blob/master/Algorithms/DS/heap.cpp" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h1 id="堆简介"><a href="#堆简介" class="headerlink" title="堆简介"></a>堆简介</h1><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><p>堆是一种基于<strong>完全二叉树</strong>的一种数据结构，通常堆可以分为以下两大类。</p><div class="table-container"><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">定义</th><th style="text-align:center">图片</th></tr></thead><tbody><tr><td style="text-align:center">大根堆 ($Max \ Heap$)</td><td style="text-align:center">所有节点的键值<strong>大于</strong>其所有的子树元素的值。</td><td style="text-align:center"><img src="/img/MaxH.png" alt="Max Heap"></td></tr><tr><td style="text-align:center">小根堆 ($Min \ Heap$)</td><td style="text-align:center">所有节点的键值<strong>小于</strong>其所有的子树元素的值。</td><td style="text-align:center"><img src="/img/MinH.png" alt="Min Heap"></td></tr></tbody></table></div><h2 id="性能汇总"><a href="#性能汇总" class="headerlink" title="性能汇总"></a>性能汇总</h2><blockquote><p><strong>施工中…..</strong></p></blockquote><div class="table-container"><table><thead><tr><th style="text-align:center"></th><th style="text-align:center">二叉堆</th><th style="text-align:center">配对堆</th><th style="text-align:center">左偏树</th><th style="text-align:center">二项堆</th><th style="text-align:center">斐波那契堆</th></tr></thead><tbody><tr><td style="text-align:center">查询最小值($find \ min$)</td><td style="text-align:center">$O(1)$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">删除最小值($delete \ min$)</td><td style="text-align:center">$O(\log{n})$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">插入($insert$)</td><td style="text-align:center">$O(\log{n})$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">合并($merger$)</td><td style="text-align:center">$O(n)$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr><tr><td style="text-align:center">减少一个元素的值($decrease \ key$)</td><td style="text-align:center">$O(\log{n})$</td><td style="text-align:center"></td><td style="text-align:center"></td><td style="text-align:center"></td></tr></tbody></table></div><h1 id="大根堆-Max-Heap"><a href="#大根堆-Max-Heap" class="headerlink" title="大根堆(Max Heap)"></a>大根堆(Max Heap)</h1><h2 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h2><p>所有节点的值大于其所有的子树元素的值，这样的堆称为大根堆($Max \ Heap$)。</p><blockquote><p>模板代码 | <a href="https://github.com/Mirasire/icpc-train/blob/master/Algorithms/DS/heap.cpp" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><h2 id="支持的操作"><a href="#支持的操作" class="headerlink" title="支持的操作"></a>支持的操作</h2><blockquote><p>由于大根堆是一颗完全二叉树，因此我们可以使用完全二叉树的性质，用数组来实现二叉堆。</p></blockquote><p><strong>复杂度汇总</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">查询最大值($find \ max$)</th><th style="text-align:center">删除最大值($delete \ max$)</th><th style="text-align:center">插入一个值($insert$)</th></tr></thead><tbody><tr><td style="text-align:center">$O(1)$</td><td style="text-align:center">$O(\log{n})$</td><td style="text-align:center">$O(\log{n})$</td></tr></tbody></table></div><h3 id="插入一个元素-insert"><a href="#插入一个元素-insert" class="headerlink" title="插入一个元素($insert$)"></a>插入一个元素($insert$)</h3><p>由于要保证二叉堆满足<strong>完全二叉树</strong>的性质，因此首先将元素插入到堆的最末尾，之后再进行<strong>向上调整</strong>。</p><ul><li><strong>具体操作如下：</strong><ul><li>假设父亲节点元素小于当前元素<ul><li>交换，继续向上调整</li></ul></li><li>假设父亲节点元素不小于当前元素<ul><li>退出操作，操作结束</li></ul></li></ul></li></ul><p>显然可以证明的是，如此操作后的二叉树依旧满足堆的性质。</p><h3 id="删除最大值-delete-max"><a href="#删除最大值-delete-max" class="headerlink" title="删除最大值($delete \ max$)"></a>删除最大值($delete \ max$)</h3><p>由于要保证二叉堆满足<strong>完全二叉树</strong>的性质，因此首先将带删除与堆的最末尾交换，删除堆的最后一个元素，之后从根开始再进行<strong>向下调整</strong>。</p><ul><li><strong>具体操作如下：</strong><ul><li>假设儿子节点元素存在大于当前元素的<ul><li><strong>选择与儿子节点中最大</strong>的交换，继续向下调整</li></ul></li><li>假设儿子节点元素都不大于当前元素<ul><li>退出操作，操作结束</li></ul></li></ul></li></ul><p>显然可以证明的是，如此操作后的二叉树依旧满足堆的性质。</p><blockquote><p>删除一个元素的思路和删除最大值相同，就不再赘述了。</p></blockquote><h3 id="堆的建立-construction-function"><a href="#堆的建立-construction-function" class="headerlink" title="堆的建立($construction \ function$)"></a>堆的建立($construction \ function$)</h3><p>先将所有的元素变成一个完全二叉树，然后<strong>进行调整</strong>，通过观察上面的$delete min$和$insert$操作，发现有两种方法可以将这个完全二叉树调整为一个堆，但是在实际操作中，这两种方式的时间复杂度是不同的。</p><ul><li>从根开始向上调整的时间复杂度为$O(n \log{n})$</li><li>从叶子开始向下调整的时间复杂度为$O(n)$</li></ul><blockquote><p>可以想一想为什么不可以从根开始向下调整，叶子同问？</p></blockquote><h2 id="Max-Heap-模板"><a href="#Max-Heap-模板" class="headerlink" title="$Max \ Heap$ 模板"></a>$Max \ Heap$ 模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//元素个数容量池</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e5</span>+<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MAXHEAP</span> &#123;</span></span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    <span class="comment">//_size equals to the number of the heap's element</span></span><br><span class="line">    <span class="keyword">int</span> data[maxn];</span><br><span class="line">    <span class="keyword">int</span> _size;</span><br><span class="line">    MAXHEAP() &#123; data[<span class="number">0</span>] = <span class="number">0</span>; &#125;</span><br><span class="line">    <span class="comment">//===========建堆===========</span></span><br><span class="line">    MAXHEAP(<span class="keyword">int</span> arr[],<span class="keyword">int</span> size) &#123;</span><br><span class="line">        _size = size;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=size; i++) data[i] = arr[i];</span><br><span class="line">        <span class="comment">//从叶子开始向下调整</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=n; i&gt;=<span class="number">1</span>; i--) down(i);</span><br><span class="line">        <span class="comment">/*</span></span><br><span class="line"><span class="comment">        从根开始向上调整: </span></span><br><span class="line"><span class="comment">        for(int i=1; i&lt;=n; i++) up(i);</span></span><br><span class="line"><span class="comment">        */</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//===========向上调整===========</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">up</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">while</span>(x&gt;<span class="number">1</span> &amp;&amp; data[x] &gt; data[x/<span class="number">2</span>]) &#123;</span><br><span class="line">            swap(data[x],data[x/<span class="number">2</span>]);</span><br><span class="line">            x/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//===========向下调整===========</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">down</span><span class="params">(<span class="keyword">int</span> x)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">int</span> t;</span><br><span class="line">        <span class="keyword">while</span>((x&lt;&lt;<span class="number">1</span>) &lt; n) &#123;</span><br><span class="line">            t = x&lt;&lt;<span class="number">1</span>;</span><br><span class="line">            <span class="keyword">if</span>(t+<span class="number">1</span>&lt;n &amp;&amp; data[t]&lt;data[t+<span class="number">1</span>]) t++;</span><br><span class="line">            <span class="keyword">if</span>(data[t]&lt;data[x]) <span class="keyword">break</span>;</span><br><span class="line">            swap(data[x],data[t]);</span><br><span class="line">            x=t;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//===========插入最大值===========</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> _data)</span> </span>&#123;</span><br><span class="line">        n++;</span><br><span class="line">        data[n] = _data;</span><br><span class="line">        up(n);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//===========返回最大值===========</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">getMax</span><span class="params">()</span> </span>&#123; <span class="keyword">return</span> data[<span class="number">1</span>]; &#125;</span><br><span class="line">    <span class="comment">//===========删除最大值===========</span></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">delMax</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        swap(data[<span class="number">1</span>],data[n]);</span><br><span class="line">        <span class="comment">//data[n]=0</span></span><br><span class="line">        n--;</span><br><span class="line">        down(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>从根开始向上调整，类似插入排序里面将无序数组插入有序数组的含义，由于调整完前n个以后，1~n必为一个堆，此时调整n+1，类似于插入元素，所以是从根开始向上调整，必然正确。</p></blockquote><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><p><strong>堆-OIWiKi</strong> | <a href="https://oi-wiki.org/ds/heap/" target="_blank" rel="noopener"><strong>LINK</strong></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本文主要介绍了&lt;strong&gt;堆的基本知识&lt;/strong&gt;和二叉堆中&lt;strong&gt;大根堆的具体实现&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;堆&lt;/strong&gt;是一种基础的数据，在寻找最大值或最小值的时候性能优秀，其中的斐波那契堆，最为出色。&lt;/p&gt;
&lt;p&gt;模板代码 | &lt;a href=&quot;https://github.com/Mirasire/icpc-train/blob/master/Algorithms/DS/heap.cpp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法和数据结构" scheme="http://mirasire.xyz/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构" scheme="http://mirasire.xyz/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="堆" scheme="http://mirasire.xyz/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E5%A0%86/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="Algorithm" scheme="http://mirasire.xyz/tags/ALGORITHM/"/>
    
      <category term="数据结构" scheme="http://mirasire.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="二叉堆" scheme="http://mirasire.xyz/tags/%E4%BA%8C%E5%8F%89%E5%A0%86/"/>
    
  </entry>
  
  <entry>
    <title>搜索树学习笔记-二叉搜索树</title>
    <link href="http://mirasire.xyz/2020/01/04/BSTREE/"/>
    <id>http://mirasire.xyz/2020/01/04/BSTREE/</id>
    <published>2020-01-04T07:20:30.000Z</published>
    <updated>2020-09-22T14:42:34.780Z</updated>
    
    <content type="html"><![CDATA[<p>记录学习<strong>搜索树</strong>中最基础的<strong>二叉搜索树</strong>得到的收获。</p><blockquote><p><del><strong>BST模板</strong> | <a href="httpaddres://github.com/Mirasire/icpc-train/tree/master/Algorithms/DS/BST.cpp" target="_blank" rel="noopener"><strong>Here</strong></a></del></p></blockquote><a id="more"></a><h2 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h2><blockquote><p>假设没有重复元素</p></blockquote><p><strong>二叉搜索树</strong>($binary \ search \ tree$)是一棵二叉树。<br>空的二叉树是<strong>二叉搜索树</strong>(后简称为: <strong>BST</strong>)，如果<strong>BST</strong>不为空，那它满足必以下性质，反之满足这些性质的二叉树都为<strong>BST</strong>。</p><ul><li><strong>性质: </strong> <ol><li>每个元素都不同</li><li>在根节点的左子树中，所有元素的关键字都小于根节点的关键字。</li><li>在根节点的右子树中，所有元素的关键字都大于根节点的关键字。</li><li>根节点的左、右子树也都是二叉搜索树。</li></ol></li></ul><h2 id="支持的操作"><a href="#支持的操作" class="headerlink" title="支持的操作"></a>支持的操作</h2><p><strong>复杂度汇总</strong></p><div class="table-container"><table><thead><tr><th style="text-align:center">查找($find$)</th><th style="text-align:center">插入($insert$)</th><th style="text-align:center">删除($earse$)</th><th style="text-align:center">遍历($ascend$)</th></tr></thead><tbody><tr><td style="text-align:center">$O(n) \sim O(\log{n})$</td><td style="text-align:center">$O(n) \sim O(\log{n})$</td><td style="text-align:center">$O(n) \sim O(\log{n})$</td><td style="text-align:center">$O(n)$</td></tr></tbody></table></div><h3 id="查找-find"><a href="#查找-find" class="headerlink" title="查找 - $find$"></a>查找 - $find$</h3><p>我们可以很轻松的发现，在<strong>BST</strong>中，查找的时间和目标节点的深度有关，当为完全二叉树时，时间复杂度为$O(\log{n})$，而最坏时间复杂度的情况，是当二叉搜索树退化成链式结构时，这时我们需要花费和与链表一样的时间复杂度，这是很糟糕的。<br><del>当然也没有这么糟糕，毕竟大佬们发明了<strong>平衡二叉搜索树</strong>($BBST$)来防止BST的退化。</del></p><p><strong>代码思路</strong></p><blockquote><p>假设待查找的关键码为$data$</p></blockquote><ul><li>按照结构向下寻找<ul><li>如果查找大于当前关键码<ul><li>在当前节点的右子树寻找</li></ul></li><li>如果查找小于当前关键码<ul><li>在当前节点的左子树寻找</li></ul></li><li>如果查找等于当前关键码<ul><li>找得答案返回结果</li></ul></li></ul></li><li>若找到最后都没有寻找到，即返回未寻得</li></ul><h3 id="插入-insert"><a href="#插入-insert" class="headerlink" title="插入 - $insert$"></a>插入 - $insert$</h3><p>插入和删除操作的时间复杂度分析与寻找操作相同，所以就不赘述了。</p><p>插入操作可以看作查找操作的延申，假设我们用插入值进行查找，显然返回结果会是<strong>NULL</strong>，但当我们关注于查找操作的倒数第二部时候，我们发现插入的值，必定为当前节点的儿子节点，于是我们只要在那时，新建节点，并且按照定义赋值给当前节点的<strong>左/右子树指针</strong>即可。</p><h3 id="删除-earse"><a href="#删除-earse" class="headerlink" title="删除 - $earse$"></a>删除 - $earse$</h3><p>删除要按照待删除节点的左、右子树<strong>分为三种</strong>情况，其中<strong>前两种</strong>情况的实现较为<strong>简单</strong>。</p><ul><li><strong>情况: </strong><ol><li>左、右子树都不存在，此时直接删除即可。</li><li>左、右子树只有一棵存在，此时直接删除，将存在的子树嫁接到上面即可。</li><li>左、右子树都存在，此时我们需要找到中序遍历中待删除节点的左或右节点(<strong>下文用左节点说明</strong>)，将左节点的赋值与现在的节点，之后删除左节点。</li></ol></li></ul><blockquote><p>关于第三种情况，我们可以发现，在我们删除左节点的时候，必为第一或者第二种情况，因此对时间复杂度无影响。</p></blockquote><h3 id="遍历-ascend"><a href="#遍历-ascend" class="headerlink" title="遍历 - $ascend$"></a>遍历 - $ascend$</h3><p>遍历即为二叉树的<strong>中序遍历</strong>($InOrder \ OutPut$)。</p><h2 id="BST模板"><a href="#BST模板" class="headerlink" title="BST模板"></a>BST模板</h2><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> INF = <span class="number">0x3f3f3f</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">NODE</span>* <span class="title">PNode</span>;</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">NODE</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> val;</span><br><span class="line">    PNode lc,rc;</span><br><span class="line">    NODE(<span class="keyword">int</span>&amp; val):val(val),lc(<span class="literal">NULL</span>),rc(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">    NODE():val(INF),lc(<span class="literal">NULL</span>),rc(<span class="literal">NULL</span>) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">bsTree</span> &#123;</span></span><br><span class="line">    <span class="keyword">private</span>:</span><br><span class="line">    <span class="comment">//============插入操作============</span></span><br><span class="line">    <span class="function">PNode <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data,PNode _rt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_rt == <span class="literal">NULL</span> || _rt-&gt;val == INF) &#123;</span><br><span class="line">            _rt = <span class="keyword">new</span> NODE(data);</span><br><span class="line">            <span class="keyword">return</span> _rt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(data &lt; _rt-&gt;val) _rt-&gt;lc = insert(data,_rt-&gt;lc);</span><br><span class="line">        <span class="keyword">else</span> _rt-&gt;rc = insert(data,_rt-&gt;rc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//============删除操作============</span></span><br><span class="line">    <span class="function">PNode <span class="title">earse</span><span class="params">(<span class="keyword">int</span> data,PNode _rt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(data == _rt-&gt;val) &#123;</span><br><span class="line">            <span class="keyword">if</span>(_rt-&gt;lc==<span class="literal">NULL</span> &amp;&amp; _rt-&gt;rc==<span class="literal">NULL</span>) &#123;</span><br><span class="line">                <span class="keyword">delete</span> _rt;</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(_rt-&gt;lc==<span class="literal">NULL</span> || _rt-&gt;rc==<span class="literal">NULL</span>) &#123;</span><br><span class="line">                PNode tmp = _rt-&gt;lc==<span class="literal">NULL</span>? _rt-&gt;rc : _rt-&gt;lc;</span><br><span class="line">                <span class="keyword">delete</span> _rt;</span><br><span class="line">                <span class="keyword">return</span> tmp;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                PNode tmp = findRightMin(_rt-&gt;rc);</span><br><span class="line">                <span class="built_in">cout</span> &lt;&lt; tmp-&gt;val &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">                _rt-&gt;val = tmp-&gt;val;</span><br><span class="line">                _rt-&gt;rc = earse(tmp-&gt;val,_rt-&gt;rc);</span><br><span class="line">                <span class="keyword">return</span> _rt;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span>(data &lt; _rt-&gt;val) &#123;</span><br><span class="line">            _rt-&gt;lc = earse(data,_rt-&gt;lc);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            _rt-&gt;rc = earse(data,_rt-&gt;rc);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//============遍历操作============</span></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">acend</span><span class="params">(PNode _now)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_now == <span class="literal">NULL</span>) &#123;</span><br><span class="line">            <span class="built_in">cout</span> &lt;&lt; <span class="string">"Tree is Empty now"</span>;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(_now-&gt;lc) acend(_now-&gt;lc);</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; _now-&gt;val &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">        <span class="keyword">if</span>(_now-&gt;rc) acend(_now-&gt;rc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span>:</span><br><span class="line">    PNode _root;</span><br><span class="line">    bsTree() &#123; _root = <span class="keyword">new</span> NODE(); &#125;</span><br><span class="line">    bsTree(<span class="keyword">int</span> arr[],<span class="keyword">int</span> n) &#123;</span><br><span class="line">        _root=<span class="keyword">new</span> NODE();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) insert(arr[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">PNode <span class="title">findLeftMax</span><span class="params">(PNode _rt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_rt-&gt;rc==<span class="literal">NULL</span>) <span class="keyword">return</span> _rt;</span><br><span class="line">        <span class="keyword">return</span> findLeftMax(_rt-&gt;rc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">PNode <span class="title">findRightMin</span><span class="params">(PNode _rt)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(_rt-&gt;lc==<span class="literal">NULL</span>) <span class="keyword">return</span> _rt;</span><br><span class="line">        <span class="keyword">return</span> findRightMin(_rt-&gt;lc);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//============查找操作============</span></span><br><span class="line">    <span class="function">PNode <span class="title">find</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123;</span><br><span class="line">        PNode tmp = _root;</span><br><span class="line">        <span class="keyword">while</span>(tmp) &#123;</span><br><span class="line">            <span class="keyword">if</span>(data &gt; tmp-&gt;val) tmp = tmp-&gt;rc;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">if</span>(data &lt; tmp-&gt;val) tmp = tmp-&gt;lc;</span><br><span class="line">            <span class="keyword">else</span> <span class="keyword">return</span> tmp;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">insert</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123; _root = insert(data,_root); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">earse</span><span class="params">(<span class="keyword">int</span> data)</span> </span>&#123; _root = earse(data,_root); &#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">acend</span><span class="params">()</span> </span>&#123; acend(_root); &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;记录学习&lt;strong&gt;搜索树&lt;/strong&gt;中最基础的&lt;strong&gt;二叉搜索树&lt;/strong&gt;得到的收获。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;del&gt;&lt;strong&gt;BST模板&lt;/strong&gt; | &lt;a href=&quot;httpaddres://github.com/Mirasire/icpc-train/tree/master/Algorithms/DS/BST.cpp&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/del&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="算法和数据结构" scheme="http://mirasire.xyz/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="数据结构" scheme="http://mirasire.xyz/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="树" scheme="http://mirasire.xyz/categories/%E7%AE%97%E6%B3%95%E5%92%8C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/%E6%A0%91/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="Algorithm" scheme="http://mirasire.xyz/tags/ALGORITHM/"/>
    
      <category term="数据结构" scheme="http://mirasire.xyz/tags/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/"/>
    
      <category term="搜索树" scheme="http://mirasire.xyz/tags/%E6%90%9C%E7%B4%A2%E6%A0%91/"/>
    
  </entry>
  
  <entry>
    <title>忆 2019</title>
    <link href="http://mirasire.xyz/2019/12/31/2019-ALL/"/>
    <id>http://mirasire.xyz/2019/12/31/2019-ALL/</id>
    <published>2019-12-31T15:59:59.000Z</published>
    <updated>2020-09-22T14:42:34.780Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>动笔于 2019-12-11 14:54:09</p></blockquote><p><strong><em>人的记忆总是不牢靠的，时常会忘记一些可有可无的事情，渐渐的，过去就成了过去，誓言就成了分别。</em></strong></p><p>——<em>莫名奇妙的题记</em></p><a id="more"></a><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>第一次写年度总结，诚言上半年的日子，已经忘却的七七八八，着实也想不起来什么印象深刻的事情，遂只好慢慢的想想，想来了，便再在晚上时候静静的写下来，做成回忆。留给未来的自己。</p><h2 id="年初参赛"><a href="#年初参赛" class="headerlink" title="年初参赛"></a>年初参赛</h2><h3 id="迷迷糊糊的回忆"><a href="#迷迷糊糊的回忆" class="headerlink" title="迷迷糊糊的回忆"></a>迷迷糊糊的回忆</h3><p>回想年初时候，具体细节已经记不太清了，那时候还留在生化的十一楼干着自己喜欢的事情，寒假回来之后，勉勉强强的每天跑了下步，不过看着<code>Keep</code>里面留下的记录，也就坚持了三四天而已，那时候真是元气满满啊，刚刚转入软件工程，每天过着幸福的日子，似乎没什么烦恼，没什么忧愁，回忆起来也没什么目标，第一次参赛是在期中左右吧，依稀记得名字是叫做团体程序设计天梯赛，比赛可能算是枯燥，坦言积分制更让人觉得这仿佛是场考试难以忍受，不过着实还是感到快乐了。差点忘了，之前的校内线下赛真的，真的很有趣。这个不是谎言，校内线下赛的非黑即白的评判，处处透露着暴力比拼的优雅，纯储备的竞争，就似拳击手一般，在赛场上拳拳到肉的厮杀，不过对象就是过去的自己，这种看似残酷与枯燥的竞争，正是我好喜的无聊的浪漫。</p><h3 id="福建程序设计省赛"><a href="#福建程序设计省赛" class="headerlink" title="福建程序设计省赛"></a>福建程序设计省赛</h3><p>最后去了福建省程序设计的省赛，这也算是第一次正式参加比赛吧，感谢我可爱的两位队友带我躺了一个铜，主办方的精心招待，嗯真的，它很美，最后滚榜的时刻，也充分意识到了差距与他人之大，虽然其实在赛中就已经体会到了，第一次想要变强，<del>可是为什么有迷惘了呢,哎</del>，于是乎上半年的参赛就这样结束了。</p><h2 id="接触线上的成长"><a href="#接触线上的成长" class="headerlink" title="接触线上的成长"></a>接触线上的成长</h2><p>其实讲真莫得什么成长，只不过知道了以后除了学校之外可以刷题的网站罢了。</p><p><code>CodeForces</code>，<code>Vjudge</code>，<code>LuoGu</code>，<code>Atcoder</code>，<code>Nowcoder</code>，…..</p><h2 id="大一下的结束"><a href="#大一下的结束" class="headerlink" title="大一下的结束"></a>大一下的结束</h2><blockquote><p>写于 2019-12-15 10:23:33</p></blockquote><p>大一下的回忆着实记不太轻了，不过，周学长带我步入编程大门的回忆确实清楚的记得，不过那些满满的回忆这里也写不下来，遂搁笔留在心中罢。</p><h3 id="XUJCOJ-Bye"><a href="#XUJCOJ-Bye" class="headerlink" title="XUJCOJ Bye~"></a>XUJCOJ Bye~</h3><p>大一接近尾声的时候，在XUJC-OJ上刷题的动力也越来越少了，可能是懒了吧。早早的就没了之前充满鸡血，能刷一个通宵的热血了，在大一结束的时候，也算正式的向XUJC-OJ说了声再见，提交数量渐渐变少，也渐渐的不再登录了，但美好的回忆和一步一步从无比幼稚到幼稚的成长，依然清楚的记录在每一次的提交之中，有时候无聊的翻阅和回忆不经会，噗嗤的笑出声来。</p><h3 id="对于学业的思考"><a href="#对于学业的思考" class="headerlink" title="对于学业的思考"></a>对于学业的思考</h3><p>坦言，没啥好说的，毕竟大一下学期，我并没有好好的努力读书，也不知道是迷茫，还是怎么的，不过时间悄然溜走的事实倒是，留下了真切的印记。</p><h2 id="在家的闲适时光"><a href="#在家的闲适时光" class="headerlink" title="在家的闲适时光"></a>在家的闲适时光</h2><p>大一结束后就早早的回了家，不过之前学长也交待完暑假集训的事情，不知道是期待还是兴奋，总之在莫名奇妙的感觉中暑假，就这样开始了，在家的日子悠哉游哉，都忘记有没有出过家门了，不过印象里好似是没有的，现在回味起来，还是觉得好不闲适，如果时间能一直停滞在暑假，那是多么小小的美好啊。</p><p>不过可惜的是，无论想象如何美好，时间并不会为之留下脚步，一切都还是慢慢的在向前流动，无论是人，亦或是时间。<del>该死的体重也在慢慢增加 ( 怒摔</del></p><h3 id="慵懒的一天"><a href="#慵懒的一天" class="headerlink" title="慵懒的一天"></a>慵懒的一天</h3><p>在家的慵懒一天，记得快到三点多了，才慢慢悠悠的起了床，迷迷糊糊的洗完了漱，方才想抓点东西来填一填”咕噜咕噜的肚子，定睛一看发现桌面上空空如也，遂困意再次袭来，摇摇晃晃的走到床边，感到寒意，关空调，裹上被子，醒来已是下午六点了。着实没什么好描述的，不过起床时候，透过阳台看见的天边那缕紫色与橙色相交织的光景，竟有种还在梦中之感。</p><h2 id="暑期集训"><a href="#暑期集训" class="headerlink" title="暑期集训"></a>暑期集训</h2><p>暑假集训的记忆早已经忘记的七七八八了，依稀记得的是，厦大的宿舍离校区真的好远，每天的集训课是完全听不大懂的，每天的早出晚归着实感动了自己，但是也收获到了，这个舞台很大，强者很多，想要变强的种子也是在那一刻，被深深的埋入土壤的吧。</p><ul><li>关于内心</li></ul><p>想要变强，想要自己搞个<code>CodeForces</code>的教练账号!</p><ul><li>实力</li></ul><p>实力是完全没有进步的，就连一丝一毫都没有。</p><ul><li>失去与获得</li></ul><p>本就一无所有，所以也就没啥失去之说，获得的也许许多多，不过更重要的是，算是找寻到了内心的呼唤。</p><h3 id="牛客暑期训练和多校联合训练"><a href="#牛客暑期训练和多校联合训练" class="headerlink" title="牛客暑期训练和多校联合训练"></a>牛客暑期训练和多校联合训练</h3><p>关于这个就真的只有一句话了，<strong>白给425软妹币</strong>，QWQ</p><h3 id="广州游记"><a href="#广州游记" class="headerlink" title="广州游记"></a>广州游记</h3><p>暑期集训到了大概一半的时候，广州的Bilibili World之旅就开始了，其实早就大一下的时候就早早的计划了起来，起初是打算弥补高考以后颓废在家里的不堪，不过后来也就不知不觉的期待了起来，广州之行是开心的，虽然自己的身体上发生了许许多多有趣的事情，或是痛苦，或是难堪，不过在广州的旅途，却是的的确确的快乐，尤其是老友相聚的喜悦尤甚。<br>感觉好玩的也有，第一次被顺丰送了美团的诧异，两天几乎没有吃到热吞吞的米饭的油腻，和在场子中人满为患的左右为难，说实话，场馆的的确确是小了点，而且第一次的走错路更让人脑子有点头疼，不过vip票收获的提早入场，的的确确的让人着实小爽了一丢丢。<del>当然荷包也瘪掉了233</del><br>离开的时候，记得广州还是很热很热的，回到厦门的时候，厦门下着小雨，然后突然的就边大了，之后越来越大，越来越大，大到想回家冲个热水澡，却堪堪的想起，自己原来呆在厦门。对了不得不提的是，回来的第一顿还是金拱门，oh my god，这真的是让人难受至极了。<br>广州回来以后没多久，暑期集训也结束了，又回到了漳州的一个世外桃源中，在那里静静的等待着大二的开始。</p><h2 id="大二上的开始"><a href="#大二上的开始" class="headerlink" title="大二上的开始"></a>大二上的开始</h2><p>大二上的记忆依稀的模模糊糊，依稀记得那时候，学长已经从台湾交流完回来，一个学期的不见变得有些许生疏，或许是我实在过于拘谨。</p><h3 id="迷茫"><a href="#迷茫" class="headerlink" title="迷茫"></a>迷茫</h3><p>大二开始的时候，十分迷茫，回头看，当初的自己简直就像什么都没学到，却已经觉得自己无敌的小白鼠，开始寻找能施展自己的舞台，迷茫如何寻得施展自己舞台的途径，以及最适合通向自己理想未来的路径。虽然对于自己的人生思考的确越早越好，但是过于急躁和焦虑却使得自己更加迷茫，假设能回到过去，我会静静的走到原来的我面前，认真的说，慢慢来吧，不要太急躁，也不要什么都不思考，不如分开来，先慢慢读懂自己，然后再去默默追寻自己。<br>不过按照我对自己的了解，那个小屁孩估计也是不会听的吧，比较那玩意一直琢磨不透。</p><h3 id="四人间到二人间"><a href="#四人间到二人间" class="headerlink" title="四人间到二人间"></a>四人间到二人间</h3><p>没什么好说的，我喜欢单人间，二人间不过是退而求其次的选择，如果能在经济支撑范围内实现单人间，毫无疑问，单人间是首选。</p><h2 id="Blog-的正式上线"><a href="#Blog-的正式上线" class="headerlink" title="Blog 的正式上线"></a>Blog 的正式上线</h2><blockquote><p>已经莫得了</p></blockquote><ul><li>meskill.top </li></ul><blockquote><p>正在使用</p></blockquote><ul><li><a href="http://mirasire.xyz"><strong>mirasire.xyz</strong></a> </li></ul><h3 id="meskill-top"><a href="#meskill-top" class="headerlink" title="meskill.top"></a>meskill.top</h3><p>关于<strong>meskill.top</strong>的所有记忆都已经遗忘的差不多了，留下的只有无尽的失落，仅存的记忆是关于它的备案，那晚上我被舍友的鼾声醒了一宿，于是便寻思找些好玩的事情干干，便一直倒腾meskill.top到了天明。至于我抛弃meskill.top的原因我倒是依然清楚的记得，更准确的说应该是抛弃了meskill吧。</p><h3 id="mirasire-xyz"><a href="#mirasire-xyz" class="headerlink" title="mirasire.xyz"></a>mirasire.xyz</h3><p>不知道是为什么突然的就不想使用meskill了，莫名其妙的，不可理喻的，突然就不想使用了，如果硬是想说原因，可能就是不想再和原来一样了吧，想要找寻真的自己，亦或是重拾小时候被自己抛弃的自己，之后就慢慢的想要使用mirasire了，蛮奇奇怪怪的，mirasire是没什么特别含义的，当初也是找了两个很美丽的词语各切一半，给拼起来的，没记错的话是<strong>希望</strong>和<strong>奇迹</strong>，是有希望就有奇迹，还是其他什么莫名奇妙的原因也记不清了。</p><p>mirasire.xyz就这样成了新的域名，我也慢慢的喜欢上了这个名字，喜欢上了现在的我。</p><h2 id="ICPC-上海区域赛"><a href="#ICPC-上海区域赛" class="headerlink" title="ICPC 上海区域赛"></a>ICPC 上海区域赛</h2><blockquote><p><strong>回忆</strong> | <a href="http://mirasire.xyz/2019/11/28/19SHUICPC"><strong>Here</strong></a></p></blockquote><p>实话说来，明明是昨日发生，却依然觉得事情已经过去了很久的样子，基调应该是只有后悔罢，还有对自身实力的不齿，总感觉有着千言万语想要诉说，不过等着那些留到嘴边，就只剩下 “<strong>下次再来的话语了</strong>“</p><h2 id="慢悠悠的思考-静悄悄的总结"><a href="#慢悠悠的思考-静悄悄的总结" class="headerlink" title="慢悠悠的思考-静悄悄的总结"></a>慢悠悠的思考-静悄悄的总结</h2><p>想了很久也不知道该说什么，零碎着断断续续的，慢悠悠的浅尝辄止的，我的思考总是这样，思来想去最后也没有的到什么结果，留下的只有莫名奇妙的感情，间歇性的一腔热血，和一些不明所以的文字了，不过没有什么实质性的言论总是不好的，于是还是胡言乱语少许，当作自己的年终思考吧。要说思考，不如说是困扰吧，今年的困扰蛮多的，关于未来啊，关于职业啊，关于爱情，还有就是关于我如何存在，或者说我是谁？思考起来就没完没了了，所以啊思来想去，想去思来，也就随便的找了几个心安理得的答案，开始敷衍着自己开始了继续的生活。<br>关于未来和职业什么的，是没什么好的结论的，想着，想着，未来的目标姑且算是想要，躺着卡里的余额也能自动增长，拜托无聊的关于钱的烦恼，然后去干自己喜欢的事情，这大概就是我期望的未来吧，职业呢，不知道，听说写代码来钱蛮快的，欸嘿嘿嘿嘿。从小就不善于处理感情什么的东西，不过对于自己的长相还是有点自知之明的，虽然天天自恋，不过怎么说呢，也在慢慢的改变吧，希望以后能在早上看见自己就有愉快的心情的这样子的小小目标。所以啊，爱情这种东西，我还是选择等待，也不知道是等待准备完毕的自己，还是在等待处在迷雾里面的她，自己呢，我也不知道我是谁，如果说名字什么的，物种什么的，我倒是知晓的清清楚楚，不过呢那终究不是我，我到底是一个怎么样子的存在，这才是我想要探寻的，这种疑惑一直围绕在我脑中，挥之不去，低落时就迸发出来，感觉还蛮难受的，后来发现，其实我思故我在，我思故我在，便想留下什么东西，还想解析自己的存在什么的，就搭建了这个博客，记录下自己的莫名其妙，也方便更好的了解自己吧。</p><h2 id="关于2020"><a href="#关于2020" class="headerlink" title="关于2020"></a>关于2020</h2><p>我希望变得更加强大，变得更加智慧，变得更加寡言多思，变得更加的聪慧，变得有当面说出 <strong>“hi 好久不见啊”</strong> 的勇气。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;动笔于 2019-12-11 14:54:09&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;&lt;em&gt;人的记忆总是不牢靠的，时常会忘记一些可有可无的事情，渐渐的，过去就成了过去，誓言就成了分别。&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;——&lt;em&gt;莫名奇妙的题记&lt;/em&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="独立思考" scheme="http://mirasire.xyz/categories/%E7%8B%AC%E7%AB%8B%E6%80%9D%E8%80%83/"/>
    
    
      <category term="生活" scheme="http://mirasire.xyz/tags/%E7%94%9F%E6%B4%BB/"/>
    
      <category term="杂感" scheme="http://mirasire.xyz/tags/%E6%9D%82%E6%84%9F/"/>
    
  </entry>
  
  <entry>
    <title>ABC#147 - F. Sum Difference</title>
    <link href="http://mirasire.xyz/2019/12/17/ABC-147-F/"/>
    <id>http://mirasire.xyz/2019/12/17/ABC-147-F/</id>
    <published>2019-12-17T14:28:01.000Z</published>
    <updated>2020-09-22T14:42:34.780Z</updated>
    
    <content type="html"><![CDATA[<p>好题，一道很思维的好题目。<del>也可能因为是我太菜了,QWQ</del></p><blockquote><p>题目链接 | <a href="https://atcoder.jp/contests/abc147/tasks/abc147_f" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>数列一共有$N$项，每个数列满足$A_1 = X \ , \ A_{i+1} = A_{i} + D$。</p><p><strong>求这个等差数列的子集的和有几种不同结果？</strong> (可以选一个也可以选全部)</p><p><strong>限制</strong></p><ul><li>$ -10^8 \leq X,D \leq 10^8 $</li><li>$ 1 \leq N \leq 2 * 10^5 $</li><li>输入都是整数</li></ul><blockquote><p>输入</p></blockquote><p><strong><em>单组案例</em></strong></p><p>输入三个数字代表$N \ X \ D$</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">100</span> <span class="number">14</span> <span class="number">20</span><span class="comment">//N X D</span></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">49805</span><span class="comment">//有49805种不同的结果</span></span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>如果$D$等于<strong>0</strong>，只要讨论$X=0$和$X \not= 0$的情况即可。</p><p>因此我们假设$D &gt; 0$，即设我们要选$k$个元素，求得的和为$T$，我们可以笼统的将$T$表示为$T = k*X + I*D$，之后我们思考$I$的取值范围。</p><script type="math/tex; mode=display">\begin{aligned}T &= k \times X + I \times D \ , \ \ k \in [0,N), k \in \mathbb{Z} \\&\Rightarrow 1+2+3+4+5+....+(k-1) \leq I \leq (N-1)+(N-2)+(N-3)+...+(N-k) \\&\Rightarrow \sum_{i=0}^{k-1}{i} \leq I \leq \sum_{i=1}^{k}{N-i} \\\Longrightarrow & \\T &= k \times X + I \times D \ , \ \ I \in [\sum_{i=0}^{k-1}{i} , \sum_{i=1}^{k}{N-i}] k \in [0,k), k \in \mathbb{Z} \\  &= (k \times X) \bmod D + I \times D \ , \ \ I \in [\lfloor k \times X \rfloor + \sum_{i=0}^{k-1}{i} , \lfloor k \times X \rfloor + \sum_{i=1}^{k}{N-i}] k \in [0,k), k \in \mathbb{Z} \\\end{aligned}</script><p>到这边发现，如果能证明当 $(k \times X ) \bmod D$ 不相等的情况下$T$的取值必然不相等，那么原来的问题就转化为了对有相同的$(k \times X) \bmod D$，求区间合并的问题。</p><p>对于这个证明我们可以使用反证法。</p><script type="math/tex; mode=display">\begin{aligned}&m_1 = (k_1 \times X) \bmod D  &T_1 &= m_1 + I_1 \times D \\&m_2 = (k_2 \times X) \bmod D  &T_2 &= m_2 + I_2 \times D \\\\&T_1 = T_2 \\ &\Rightarrow m_1 + I_1 \times D =  m_2 + I_2 \times D \\&\Rightarrow m_1 - m_2 = (I_2-I_1) \times D\end{aligned}\\\begin{aligned}\\&\because 0 \leq m_1,m_2 < D \ or \ -D < m_1,m_2 \leq 0 \\&\therefore  m_1 - m_2 < D \\&\because m_1 - m_2 \not= 0 \\&\therefore  T_1 != T_2 \\\end{aligned}</script><p>所以这题的解法为对$(k \times X) \bmod D$ 相等的区间合并，并加上所有的区间长度。这边说的区间长度指$I$的区间长度。</p><p>对于$D&lt;0$的情况我们只要将，$X,D$都乘上$-1$即可。</p><p>由于主要计算在于排序所以，所以时间复杂度为$O(NlogN)$</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"> </span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> <span class="keyword">int</span> ll;</span><br><span class="line"><span class="keyword">const</span><span class="keyword">int</span> maxn = <span class="number">2e5</span>+<span class="number">100</span>;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">SECTION</span> &#123;</span></span><br><span class="line">    ll l,r;</span><br><span class="line">    SECTION() &#123;&#125;</span><br><span class="line">    SECTION(ll l,ll r):l(l),r(r) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt;(<span class="keyword">const</span> SECTION&amp; oth) <span class="keyword">const</span> &#123;</span><br><span class="line">        <span class="keyword">if</span>(l==oth.l) <span class="keyword">return</span> r &lt; oth.r;</span><br><span class="line">        <span class="keyword">return</span> l &lt; oth.l;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>==(<span class="keyword">const</span> SECTION&amp; oth) <span class="keyword">const</span> &#123; <span class="keyword">return</span> l==oth.l&amp;&amp;r==oth.r; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">map</span>&lt;ll,<span class="keyword">int</span>&gt; idx;</span><br><span class="line"><span class="built_in">vector</span>&lt;SECTION&gt; sec[maxn];</span><br><span class="line">ll N,X,D;</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::ios::sync_with_stdio(<span class="literal">false</span>);</span><br><span class="line">    ll kl=<span class="number">0</span>,kr=<span class="number">0</span>,key,cnt = <span class="number">0</span>,ans = <span class="number">0</span>;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N &gt;&gt; X &gt;&gt; D;</span><br><span class="line">    <span class="keyword">if</span>(D==<span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span>(!X) <span class="built_in">cout</span> &lt;&lt; <span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">cout</span> &lt;&lt; N+<span class="number">1</span> &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(D&lt;<span class="number">0</span>) &#123;<span class="comment">//D &lt; 0 的情况</span></span><br><span class="line">        X*=<span class="number">-1</span>;</span><br><span class="line">        D*=<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    ll l,r;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=N; i++) &#123;</span><br><span class="line">        key = i*X;</span><br><span class="line">        ll bb = key%D;</span><br><span class="line">        l = r = key/D;</span><br><span class="line">        l+=kl; r+=kr;</span><br><span class="line">        <span class="keyword">if</span>(idx[bb]==<span class="number">0l</span>l) idx[bb] = ++cnt;</span><br><span class="line">        sec[idx[bb]].push_back(&#123;--l,r&#125;);</span><br><span class="line">        kl+=i,kr+=N-i<span class="number">-1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=cnt; i++) &#123;</span><br><span class="line">        SECTION tp;</span><br><span class="line">        sort(sec[i].begin(),sec[i].end());</span><br><span class="line">        tp = sec[i][<span class="number">0</span>];</span><br><span class="line">        <span class="keyword">for</span>(SECTION now: sec[i]) &#123;</span><br><span class="line">            <span class="keyword">if</span>(now.l &lt;= tp.r) tp.r = max(tp.r,now.r);</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                ans += tp.r-tp.l;</span><br><span class="line">                tp = now;</span><br><span class="line">            &#125;</span><br><span class="line"> </span><br><span class="line">            <span class="keyword">if</span>(now == sec[i].back()) &#123;</span><br><span class="line">                ans += tp.r-tp.l;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; ans &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;好题，一道很思维的好题目。&lt;del&gt;也可能因为是我太菜了,QWQ&lt;/del&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目链接 | &lt;a href=&quot;https://atcoder.jp/contests/abc147/tasks/abc147_f&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="AtCoder" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/ATCODER/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="ABC" scheme="http://mirasire.xyz/tags/ABC/"/>
    
      <category term="AtCoder" scheme="http://mirasire.xyz/tags/ATCODER/"/>
    
      <category term="数学" scheme="http://mirasire.xyz/tags/%E6%95%B0%E5%AD%A6/"/>
    
      <category term="idea" scheme="http://mirasire.xyz/tags/IDEA/"/>
    
  </entry>
  
  <entry>
    <title>ABC#147 - D. Xor Sum 4</title>
    <link href="http://mirasire.xyz/2019/12/10/ABC-147-D/"/>
    <id>http://mirasire.xyz/2019/12/10/ABC-147-D/</id>
    <published>2019-12-10T14:39:10.000Z</published>
    <updated>2020-09-22T14:42:34.780Z</updated>
    
    <content type="html"><![CDATA[<p>关于数值和进制转换的深刻理解的题，无敌感谢qsc学姐的指点!!</p><blockquote><p>题目链接 | <a href="https://atcoder.jp/contests/abc147/tasks/abc147_d" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p>有$N$个数，从$A_1,A_2,……,A_n$，<br>求 $\sum_{i=1}^{N-1}\sum_{j=i+1}^{N} (A_i \mbox{ XOR } A_j)$ % $(10^9+7)$ 的值</p><blockquote><p>输入</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">10</span><span class="comment">//N</span></span><br><span class="line"><span class="number">3</span> <span class="number">1</span> <span class="number">4</span> <span class="number">1</span> <span class="number">5</span> <span class="number">9</span> <span class="number">2</span> <span class="number">6</span> <span class="number">5</span> <span class="number">3</span><span class="comment">//A(1) ~ A(10)</span></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">237</span></span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>这个是一个有关<strong>进位理解</strong>的题目，假设我们取消对二进制每一位都是 $0/1$ 的限制, 那么我们发现二进制 $101$ 和 $21$ 的值是一样的。</p><p>即如果<strong>不考虑进位操作</strong>，那么我们可以用每一位的权相加最后再乘上相应的奇数来求得最后的答案。</p><p>这样我们每一位(只有0,1)进行<code>^</code>考虑，由于转化为二进制之后所有的<code>^</code>只有两种情况，即<code>相等^</code>和<code>不相等^</code>，由于<code>^</code>运算，所以只有<code>不相等^</code>才会得到值，并且<strong>值为1</strong>。</p><p>原题就等于 $\sum_{i=0}^{60} (第i位的0的个数 * 第i位的1的个数 {*} 2^i)$ % $(10e9+7)$。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">long</span> <span class="keyword">long</span> ll;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">3e5</span>+<span class="number">100</span>,MOD = <span class="number">1e9</span>+<span class="number">7</span>;</span><br><span class="line">ll arr[maxn],bits[maxn][<span class="number">2</span>],tt[maxn];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    ll n,ans = <span class="number">0</span>;</span><br><span class="line">    tt[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=<span class="number">60</span>; i++) &#123;</span><br><span class="line">        tt[i] = tt[i<span class="number">-1</span>]*<span class="number">2</span>%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="comment">//slove()</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;n);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) <span class="built_in">scanf</span>(<span class="string">"%lld"</span>,&amp;arr[i]);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;=<span class="number">60</span>; k++) &#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++) &#123;</span><br><span class="line">            bits[k][arr[i]%<span class="number">2</span>]++;</span><br><span class="line">            arr[i]/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans+bits[k][<span class="number">0</span>]*bits[k][<span class="number">1</span>]%MOD*tt[k]%MOD)%MOD;</span><br><span class="line">    &#125;</span><br><span class="line">    ans %= MOD;</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%lld\n"</span>,ans);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;关于数值和进制转换的深刻理解的题，无敌感谢qsc学姐的指点!!&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目链接 | &lt;a href=&quot;https://atcoder.jp/contests/abc147/tasks/abc147_d&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="AtCoder" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/ATCODER/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="xor" scheme="http://mirasire.xyz/tags/XOR/"/>
    
      <category term="数位统计" scheme="http://mirasire.xyz/tags/%E6%95%B0%E4%BD%8D%E7%BB%9F%E8%AE%A1/"/>
    
      <category term="ABC" scheme="http://mirasire.xyz/tags/ABC/"/>
    
      <category term="AtCoder" scheme="http://mirasire.xyz/tags/ATCODER/"/>
    
  </entry>
  
  <entry>
    <title>POJ 3279 Fliptile</title>
    <link href="http://mirasire.xyz/2019/12/09/POJ3279/"/>
    <id>http://mirasire.xyz/2019/12/09/POJ3279/</id>
    <published>2019-12-09T08:29:43.000Z</published>
    <updated>2020-09-22T14:42:34.784Z</updated>
    
    <content type="html"><![CDATA[<p>这题虽然是在<strong>Kuangbin搜索专题</strong>，不过其实个人感觉更像<strong>枚举。</strong></p><blockquote><p>题目链接 | <a href="https://vjudge.net/problem/POJ-3279#author=1701400204" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p><em>引用了SWUN2018的翻译</em></p><p>给你一个<strong>0/1</strong>矩阵，矩阵大小为$M * N \quad (1 \leq M , N \leq 15 )$<br>每次操作选择一个格子(也可以不选)，使得<strong>该格子与上下左右四个格子</strong>的值翻转。即<strong>0变为1，1变为0</strong>。<br><strong>至少多少次操作</strong>可以使得矩阵中所有的值变为0？<br>请输出翻转方案，若没有方案，输出”<strong>IMPOSSIBLE</strong>” 。</p><blockquote><p>输入</p></blockquote><p>第一行输入两个数$M$和$N$。<br>接下来$M$行，每行$N$个数，其值只为<strong>0或1</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">4</span> <span class="number">4</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">0</span> <span class="number">1</span> <span class="number">1</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><p>输出$M$行，每行$N$个数。<br>每个数代表该位置翻转次数</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">0</span> <span class="number">0</span> <span class="number">1</span></span><br><span class="line"><span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">0</span></span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><blockquote><p>这里的状态，代表操作的状态</p></blockquote><p><strong>显然每个地方最多只翻一次，偶数效果等于0，奇数次效果等于1</strong></p><p>先考虑<strong>朴素暴力</strong>，即对每一层进行枚举，由于每一层的元素个数是$m$个，只有<strong>两种</strong>状态，所以<strong>每一层的状态数为$2^m$个</strong>，由于有$n$层，所以<strong>总的状态数为$2^{n*m}$次。</strong></p><p>这样子显然是<strong>超时的</strong>，我们发现，假设我们已经确定上一层的状态，那么下一层的操作只能并且<strong>必须</strong>是在<strong>1</strong>的棋子下面进行操作，换言之，就是<strong>只要上一层状态确定，下一层只有一种翻转方法</strong>。</p><p><strong>由此</strong>我们只要暴力<strong>枚举第一层的状态</strong>，这样<strong>状态数</strong>就下降到了$2^n$次，然后按照上面的操作进行翻转，全部操作完毕后，<strong>判断最后一行是否全为0即可</strong>。</p><p><em>小坑: 这题中的字典序是从右向左</em></p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">20</span>;</span><br><span class="line"><span class="keyword">int</span> n,m;</span><br><span class="line"><span class="keyword">int</span> mazz[maxn][maxn],grid[maxn][maxn],ans[maxn][maxn];</span><br><span class="line"><span class="keyword">int</span> dir[<span class="number">5</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">1</span>&#125;,&#123;<span class="number">-1</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">-1</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">legal</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123; <span class="keyword">return</span> (x&gt;=<span class="number">0</span> &amp;&amp; x&lt;n &amp;&amp; y&gt;=<span class="number">0</span> &amp;&amp; y&lt;m); &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">filp</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">    ans[x][y] = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> nx,ny;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">5</span>; i++) &#123;</span><br><span class="line">        nx = x + dir[i][<span class="number">0</span>];</span><br><span class="line">        ny = y + dir[i][<span class="number">1</span>];</span><br><span class="line">        <span class="keyword">if</span>(legal(nx,ny)) grid[nx][ny]^=<span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">slove</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++) </span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"%d%c"</span>,ans[i][j],<span class="string">" \n"</span>[j==(m<span class="number">-1</span>)]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;n; i++)</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>; j&lt;m; j++)</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;mazz[i][j]);</span><br><span class="line">    <span class="keyword">int</span> end = <span class="number">1</span>&lt;&lt;m,bsk;</span><br><span class="line">    <span class="keyword">bool</span> ok = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;end; i++) &#123;</span><br><span class="line">        ok = <span class="number">1</span>;</span><br><span class="line">        bsk = i;</span><br><span class="line">        <span class="built_in">memcpy</span>(grid,mazz,<span class="keyword">sizeof</span>(mazz));</span><br><span class="line">        <span class="built_in">memset</span>(ans,<span class="number">0</span>,<span class="keyword">sizeof</span>(ans));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;m; k++) &#123;</span><br><span class="line">            <span class="keyword">if</span>(bsk%<span class="number">2</span>) filp(<span class="number">0</span>,k);</span><br><span class="line">            bsk/=<span class="number">2</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">1</span>; j&lt;n; j++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>; k&lt;m; k++) &#123;</span><br><span class="line">                <span class="keyword">if</span>(grid[j<span class="number">-1</span>][k]) filp(j,k);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k=<span class="number">0</span>,j=n<span class="number">-1</span>; k&lt;m; k++) </span><br><span class="line">            <span class="keyword">if</span>(grid[j][k]) &#123;</span><br><span class="line">                ok = <span class="number">0</span>;</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        <span class="keyword">if</span>(ok) &#123;</span><br><span class="line">            slove();</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(!ok) <span class="built_in">printf</span>(<span class="string">"IMPOSSIBLE\n"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="反思"><a href="#反思" class="headerlink" title="反思"></a>反思</h2><p><strong>时隔一年才完结简单搜索专题，就记下此题为耻辱柱，鞭策前行</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这题虽然是在&lt;strong&gt;Kuangbin搜索专题&lt;/strong&gt;，不过其实个人感觉更像&lt;strong&gt;枚举。&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;题目链接 | &lt;a href=&quot;https://vjudge.net/problem/POJ-3279#author=1701400204&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="POJ" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/POJ/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="POJ" scheme="http://mirasire.xyz/tags/POJ/"/>
    
      <category term="二进制枚举" scheme="http://mirasire.xyz/tags/%E4%BA%8C%E8%BF%9B%E5%88%B6%E6%9E%9A%E4%B8%BE/"/>
    
  </entry>
  
  <entry>
    <title>HDU 3416 Marriage Match IV</title>
    <link href="http://mirasire.xyz/2019/12/08/HDU3416/"/>
    <id>http://mirasire.xyz/2019/12/08/HDU3416/</id>
    <published>2019-12-08T04:42:50.000Z</published>
    <updated>2020-09-22T14:42:34.780Z</updated>
    
    <content type="html"><![CDATA[<p><strong><em>需要仔细的读题，真的真的很重要!!!</em></strong></p><ul><li><strong>有重复的边，并且是有向图</strong></li><li><strong>最短路+最大流</strong></li></ul><blockquote><p>题目链接 | <a href="https://vjudge.net/problem/HDU-3416" target="_blank" rel="noopener"><strong>Here</strong></a></p></blockquote><a id="more"></a><h2 id="题意"><a href="#题意" class="headerlink" title="题意"></a>题意</h2><p><strong>这是一张有向图，并且有重边 !!!</strong></p><p>有个人，就叫<strong>小王</strong>好了,<strong>小王</strong>从$A$到$B$，去找女朋友约会，由于小王想快点找到女朋友，所以小王总是走最短路，现在规定每条路径只能走一次。</p><p><strong>问:</strong> 小王<strong>最多能去几次</strong>?</p><blockquote><p>输入</p></blockquote><p>先输入一个$T$，代表有$T$组案例。<br>接下来输入$n，m$，代表有$n$个城市和$m$条有向边。<br>之后的$m$行，每行输入$u,v,w$，代表$dist \langle u,v \rangle  = w$<br>之后输入一行$s,t$，代表<strong>小王和他女朋友</strong>在的城市。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">7</span> <span class="number">8</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">7</span> <span class="number">1</span></span><br><span class="line"><span class="number">6</span> <span class="number">7</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">7</span></span><br><span class="line"></span><br><span class="line"><span class="number">6</span> <span class="number">7</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">2</span> <span class="number">3</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">3</span> <span class="number">4</span> <span class="number">1</span></span><br><span class="line"><span class="number">3</span> <span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">4</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">6</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">6</span></span><br><span class="line"></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">1</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">1</span> <span class="number">2</span></span><br></pre></td></tr></table></figure><blockquote><p>输出</p></blockquote><p>每行代表小王<strong>最多能去几次</strong>。</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure><h2 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h2><p>如果<strong>没有</strong>小王的要走最短路的<strong>限制</strong>，答案是所有边的<strong>容量为1的最大流</strong>。</p><p>由于在此题要求每次<strong>只走最短路</strong>，所以我们需要先跑个最短路算法，然后依照最短路得出的<strong>最短距离</strong>，建图跑最大流，得到的就是答案。</p><h3 id="AC代码"><a href="#AC代码" class="headerlink" title="AC代码"></a>AC代码</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> INF 0x3f3f3f3f</span></span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxn = <span class="number">1e3</span>+<span class="number">100</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//===For Dijkstra====</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">DEdge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> to,nxt,w;</span><br><span class="line">    DEdge() &#123;&#125;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">def</span><span class="params">(<span class="keyword">int</span> a,<span class="keyword">int</span> b,<span class="keyword">int</span> wi)</span> </span>&#123; to=a; nxt=b; w=wi; &#125;</span><br><span class="line">&#125; de[<span class="number">200200</span>];</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">STATUS</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> idx,td;</span><br><span class="line">    STATUS() &#123;&#125;</span><br><span class="line">    STATUS(<span class="keyword">int</span> idx,<span class="keyword">int</span> td):idx(idx),td(td) &#123;&#125;</span><br><span class="line">    <span class="keyword">bool</span> <span class="keyword">operator</span>&lt; (<span class="keyword">const</span> STATUS&amp; oth) <span class="keyword">const</span> &#123; <span class="keyword">return</span> td &gt; oth.td; &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">int</span> head[maxn],dist[maxn],dcnt;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">DaddEdge</span><span class="params">(<span class="keyword">int</span> u,<span class="keyword">int</span> v,<span class="keyword">int</span> w)</span> </span>&#123;</span><br><span class="line">    de[++dcnt].def(u,head[v],w); head[v] = dcnt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">dijkstra</span><span class="params">(<span class="keyword">int</span> s)</span> </span>&#123;</span><br><span class="line">    dist[s] = <span class="number">0</span>;</span><br><span class="line">    STATUS now = &#123;s,<span class="number">0</span>&#125;;</span><br><span class="line">    priority_queue&lt;STATUS&gt; <span class="built_in">list</span>;</span><br><span class="line">    <span class="built_in">list</span>.push(now);</span><br><span class="line">    <span class="keyword">while</span>(!<span class="built_in">list</span>.empty()) &#123;</span><br><span class="line">        now = <span class="built_in">list</span>.top();</span><br><span class="line">        <span class="built_in">list</span>.pop();</span><br><span class="line">        <span class="keyword">if</span>(dist[now.idx] &lt; now.td) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=head[now.idx]; i!=<span class="number">-1</span>; i=de[i].nxt) &#123;</span><br><span class="line">            DEdge&amp; v = de[i];</span><br><span class="line">            <span class="keyword">if</span>(v.w+now.td &lt; dist[v.to]) &#123;</span><br><span class="line">                dist[v.to] = now.td + v.w;</span><br><span class="line">                <span class="built_in">list</span>.push(&#123;v.to,dist[v.to]&#125;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Edge</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> from, to, cap, flow;</span><br><span class="line">    Edge(<span class="keyword">int</span> u, <span class="keyword">int</span> v, <span class="keyword">int</span> c, <span class="keyword">int</span> f) : from(u), to(v), cap(c), flow(f) &#123;&#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Dinic</span> &#123;</span></span><br><span class="line">    <span class="keyword">int</span> n, m, s, t;</span><br><span class="line">    <span class="built_in">vector</span>&lt;Edge&gt; edges;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; G[maxn];</span><br><span class="line">    <span class="keyword">int</span> d[maxn], cur[maxn];</span><br><span class="line">    <span class="keyword">bool</span> vis[maxn];</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) G[i].clear();</span><br><span class="line">        edges.clear();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">AddEdge</span><span class="params">(<span class="keyword">int</span> from, <span class="keyword">int</span> to, <span class="keyword">int</span> cap)</span> </span>&#123;</span><br><span class="line">        edges.push_back(Edge(from, to, cap, <span class="number">0</span>));</span><br><span class="line">        edges.push_back(Edge(to, from, <span class="number">0</span>, <span class="number">0</span>));</span><br><span class="line">        m = edges.size();</span><br><span class="line">        G[from].push_back(m - <span class="number">2</span>);</span><br><span class="line">        G[to].push_back(m - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">bool</span> <span class="title">BFS</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="built_in">memset</span>(vis, <span class="number">0</span>, <span class="keyword">sizeof</span>(vis));</span><br><span class="line">        <span class="built_in">queue</span>&lt;<span class="keyword">int</span>&gt; Q;</span><br><span class="line">        Q.push(s);</span><br><span class="line">        d[s] = <span class="number">0</span>;</span><br><span class="line">        vis[s] = <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">while</span> (!Q.empty()) &#123;</span><br><span class="line">            <span class="keyword">int</span> x = Q.front();</span><br><span class="line">            Q.pop();</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; G[x].size(); i++) &#123;</span><br><span class="line">                Edge&amp; e = edges[G[x][i]];</span><br><span class="line">                <span class="keyword">if</span> (!vis[e.to] &amp;&amp; e.cap &gt; e.flow) &#123;</span><br><span class="line">                    vis[e.to] = <span class="number">1</span>;</span><br><span class="line">                    d[e.to] = d[x] + <span class="number">1</span>;</span><br><span class="line">                    Q.push(e.to);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> vis[t];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">DFS</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> a)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (x == t || a == <span class="number">0</span>) <span class="keyword">return</span> a;</span><br><span class="line">        <span class="keyword">int</span> flow = <span class="number">0</span>, f;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span>&amp; i = cur[x]; i &lt; G[x].size(); i++) &#123;</span><br><span class="line">            Edge&amp; e = edges[G[x][i]];</span><br><span class="line">            <span class="keyword">if</span> (d[x] + <span class="number">1</span> == d[e.to] &amp;&amp; (f = DFS(e.to, min(a, e.cap - e.flow))) &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                e.flow += f;</span><br><span class="line">                edges[G[x][i] ^ <span class="number">1</span>].flow -= f;</span><br><span class="line">                flow += f;</span><br><span class="line">                a -= f;</span><br><span class="line">                <span class="keyword">if</span> (a == <span class="number">0</span>) <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">int</span> <span class="title">Maxflow</span><span class="params">(<span class="keyword">int</span> s, <span class="keyword">int</span> t)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>-&gt;s = s;</span><br><span class="line">        <span class="keyword">this</span>-&gt;t = t;</span><br><span class="line">        <span class="keyword">int</span> flow = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (BFS()) &#123;</span><br><span class="line">            <span class="built_in">memset</span>(cur, <span class="number">0</span>, <span class="keyword">sizeof</span>(cur));</span><br><span class="line">            flow += DFS(s, INF);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> flow;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> T;</span><br><span class="line">    <span class="keyword">int</span> u,v,iw;</span><br><span class="line">    <span class="keyword">int</span> n,m,s,t;</span><br><span class="line">    Dinic dinic;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">"%d"</span>,&amp;T);</span><br><span class="line">    <span class="keyword">while</span>(T--) &#123;</span><br><span class="line">        <span class="comment">//Init</span></span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;n,&amp;m);</span><br><span class="line">        dcnt = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            dist[i] = INF;</span><br><span class="line">            head[i] = <span class="number">-1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        dinic.init(n+<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;m; i++) &#123;</span><br><span class="line">            <span class="built_in">scanf</span>(<span class="string">"%d%d%d"</span>,&amp;u,&amp;v,&amp;iw);</span><br><span class="line">            DaddEdge(v,u,iw); <span class="comment">//!!!注意是有向边</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">"%d%d"</span>,&amp;s,&amp;t);</span><br><span class="line">        <span class="comment">//================跑最短路===================</span></span><br><span class="line">        dijkstra(s);</span><br><span class="line">        <span class="keyword">if</span>(dist[t] == INF) &#123;</span><br><span class="line">            <span class="built_in">printf</span>(<span class="string">"0\n"</span>);</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//================最短路建图===================</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">1</span>; i&lt;=n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="keyword">int</span> j=head[i]; j!=<span class="number">-1</span>; j=de[j].nxt) &#123;</span><br><span class="line">                <span class="keyword">if</span>(dist[de[j].to] == dist[i]+de[j].w) dinic.AddEdge(i,de[j].to,<span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">"%d\n"</span>,dinic.Maxflow(s,t));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;&lt;em&gt;需要仔细的读题，真的真的很重要!!!&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;有重复的边，并且是有向图&lt;/strong&gt;&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;最短路+最大流&lt;/strong&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;题目链接 | &lt;a href=&quot;https://vjudge.net/problem/HDU-3416&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;&lt;strong&gt;Here&lt;/strong&gt;&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
    
      <category term="题解" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/"/>
    
      <category term="HDUOJ" scheme="http://mirasire.xyz/categories/%E9%A2%98%E8%A7%A3/HDUOJ/"/>
    
    
      <category term="icpc" scheme="http://mirasire.xyz/tags/ICPC/"/>
    
      <category term="网络流" scheme="http://mirasire.xyz/tags/%E7%BD%91%E7%BB%9C%E6%B5%81/"/>
    
      <category term="最大流" scheme="http://mirasire.xyz/tags/%E6%9C%80%E5%A4%A7%E6%B5%81/"/>
    
      <category term="HDUOJ" scheme="http://mirasire.xyz/tags/HDUOJ/"/>
    
      <category term="最短路" scheme="http://mirasire.xyz/tags/%E6%9C%80%E7%9F%AD%E8%B7%AF/"/>
    
  </entry>
  
</feed>
